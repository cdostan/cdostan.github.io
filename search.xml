<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2025_BUAA_OO_Unit1</title>
    <url>/2025/03/20/OO/oo_Unit1/</url>
    <content><![CDATA[<p>第一单元的OO在紧张与刺激中落下帷幕，回顾第一单元，真是应了吴际老师上学期在OOPre的最后讲的“一定要好好理解文法分析，不然下学期的第一单元会很痛苦”。整个Unit1就是围绕文法展开，前前后后就是让我们展开表达式，在我们做好这个蛋糕后，再用化简优化去为它裱花点缀。</p>
<h1 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h1><p>第一次作业较为简单，因为出现的是最基本的常数与幂函数，且括号最多一层，因此实现起来并不困难，只要把词法和语法分析做好，并能实现展开，第一次作业就基本成型。</p>
<h2 id="1-1程序架构"><a href="#1-1程序架构" class="headerlink" title="1.1程序架构"></a>1.1程序架构</h2><p><strong>UML类图</strong><br><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit1/hw1uml.png"></p>
<p><strong>功能说明</strong>  </p>
<ul>
<li><code>Main</code>：程序入口  </li>
<li><code>Expr</code>、<code>Term</code>、<code>Variable</code>、<code>Const</code>：表达式的基础结构  </li>
<li><code>Symbol</code>：进行符号处理，保证每一个项的内部不会出现正号或负号，且每个项前最多有一个符号  </li>
<li><code>Lexer</code>、<code>Parser</code>：进行语法和词法分析  </li>
<li><code>Poly</code>：把项规范为形如 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="5.502ex" height="1.956ex" role="img" focusable="false" viewBox="0 -853.7 2431.8 864.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(1473.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></g></svg></mjx-container> 的形式  </li>
<li><code>Operate</code>：进行运算，包括表达式幂的展开和项的展开</li>
</ul>
<h2 id="1-2代码复杂度"><a href="#1-2代码复杂度" class="headerlink" title="1.2代码复杂度"></a>1.2代码复杂度</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit1/hw1_complexity.png"></p>
<p>可以发现，其中<code>Operate</code>、<code>Parse</code>、<code>Symbol</code>的复杂度比较高，其中有最大的圈复杂度甚至达到了16。我在这几个类里面所用到的条件判断语句和循环语句以及函数调用比较多，因此造成了圈复杂度比较高。拿<code>Symbol</code>类举例来说，虽然里面就只有两个方法，但针对字符串化简符号的逻辑是十分复杂的，尤其是项里面有子表达式的时候，因此涉及到很多判断和循环，造成圈复杂度很高，而这样的结果也说明了我这个类以及里面的方法其实可迭代性和可维护性并不好，因为化简符号不像词法和语法分析那样只需要添加一定的<code>token</code>和语法解析就能实现，在后续表达式逐渐变复杂后整个符号化简的逻辑可能会大变，而且遇上多层嵌套括号后复杂度可能会很高。<br>进一步分析，其实会发现我第一次作业的架构和”高内聚低耦合”似乎不太沾边，我后续作业是经过了重构的，因此后续完全没有回顾过我第一次作业。而当我重看第一次作业代码时，抛开写得shi不shi不谈，其实理解还是很容易理解的，但是整体看下来其实好像并不是在写面向对象编程，而是在写面向过程编程，很多类的耦合度过高，而有的类该自己干的事没干，不该自己干的事干了，甚至有的类干的事和自己的名字都没啥关系，比如<code>Poly</code>。因此我在第一次作业结束后发现在这样的代码基础上迭代十分困难，决定重构。</p>
<h2 id="1-3化简优化"><a href="#1-3化简优化" class="headerlink" title="1.3化简优化"></a>1.3化简优化</h2><p>能把整个表达式正确展开后，其实本次作业的正确性我们已经可以拿满分了，但是估计性能分会很低。针对第一次作业，其实化简无非就是同类项合并，而判断能否合并也十分简单，只需要判断展开后每个项中x的幂次相等，最后如果所有项里有符号为正的，我们把它放在第一位即可省掉一个负号带来的长度，实现了这些后，性能分也可以拿满。</p>
<h2 id="1-4Bug分析"><a href="#1-4Bug分析" class="headerlink" title="1.4Bug分析"></a>1.4Bug分析</h2><p>在互测中我出现了一些WA的错误，而错误的来源全是来自于我<code>Symbol</code>类中化简符号的方法出错（其逻辑真的很复杂，bug修复时针对这一个bug都修改了好多行），具体出错的原因是我把项里子表达式的第一个符号拿出来给了整个项，若是正号还好，但如果是负号，我整个项的符号就会取一次反，最终造成错误。<br>事实上，这个符号简化的方法完全是自己折腾自己，因为完全可以把符号放在语法分析里面一起，这样在解析完一个项时，它的符号也被解析出来，因此我后续重构的时候完全摒弃了这一个类。</p>
<h1 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h1><p>第二次作业较第一次作业的难度陡然上升，引进了三角函数和自定义递推函数，同时允许多层嵌套括号。主要有两个难点，一个是如何正确地算出递推函数并代入表达式，一个是针对有三角函数的化简可以怎么做，如果不考虑化简的话，只需要解决递推函数这个难点即可。由于第一次作业我的架构很烂，层次不清淅，因此第二次作业我首先进行了重构。</p>
<h2 id="2-1程序架构"><a href="#2-1程序架构" class="headerlink" title="2.1程序架构"></a>2.1程序架构</h2><p><strong>UML类图</strong><br><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit1/hw2uml.png"></p>
<p><strong>功能说明</strong>  </p>
<ul>
<li><code>Main</code>：程序入口  </li>
<li><code>Expr</code>、<code>Term</code>、<code>Var</code>、<code>Const</code>、<code>Trigono</code>、<code>Func</code>：表达式基础结构  </li>
<li><code>Parser</code>、<code>Lexer</code>、<code>Token</code>：语法词法解析  </li>
<li><code>Funcrecur</code>：递推函数相关信息获取，并计算递推函数  </li>
<li><code>Regofunc</code>：存储被解析出来的递推函数规则，供整个项目使用  </li>
<li><code>Bracketdeal</code>：括号处理，寻找匹配的括号  </li>
<li><code>Equandneg</code>：判断表达式是否相等或相反  </li>
<li><code>Unit</code>：最终表达式中的最小单元，形如 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.633ex" height="2.497ex" role="img" focusable="false" viewBox="0 -853.7 8677.7 1103.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(751.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(1473.4,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g><g data-mml-node="mo" transform="translate(2654,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3376.2,0)"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1414,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(1803,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mo" transform="translate(5790.5,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6512.7,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1387,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(1776,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container>  </li>
<li><code>Entirety</code>：由多个<code>Unit</code>组成的单元</li>
</ul>
<h2 id="2-2代码复杂度"><a href="#2-2代码复杂度" class="headerlink" title="2.2代码复杂度"></a>2.2代码复杂度</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit1/hw2_complexity.png">  </p>
<p>在本次项目中，复杂度较高的类为<code>Unit</code>类，其他类复杂度稍高可能是因为条件和循环语句稍多，例如<code>Lexer</code>和<code>Bracketdeal</code>类，而<code>Unit</code>类的复杂度是由于其里面涉及了很多方法，包括运算以及判断是否能合并等方法，涉及到的方法调用也较多，因此呈现了一个较高的复杂度。<br>此次作业我尽可能的满足了“高内聚低耦合”的想法，尽可能把一些特定功能单独抽象出来成为一个类，同时尽量保证每个类只干和自己相关的事。<br><strong>重构前后对比</strong><br>先抛开本次作业新增的三角函数和自定义递推函数不谈，其他部分我也和第一次作业有很大的差别。<br>首先是词法和语法解析，本次我单独设计了一个<code>Token</code>类，里面包含了字符串所包含的可能的字符类型，而不是在<code>Lexer</code>类里对字符串中的一个一个字符分析，整理来说可理解性和可迭代行会增强不少。我还在<code>Parser</code>里面确定了项的符号，直接抛弃了第一次作业中的<code>Symbol</code>类，且这样的方法几乎适用于往后的所有迭代。<br>其次我设计了<code>Entirety</code>和<code>Unit</code>两个类，最终的计算化简全都在这两个类中进行，而所有的表达式基础结构如<code>Expr</code>等都有一个<code>toentirety()</code>方法，方便之后的展开和化简，这样，我的代码在面临下一次迭代时可能不需要修改很多东西就能适应情景，而层次化的结构也比较清晰，这提高了整个项目的可维护性。  </p>
<h2 id="2-3难点分析及化简优化"><a href="#2-3难点分析及化简优化" class="headerlink" title="2.3难点分析及化简优化"></a>2.3难点分析及化简优化</h2><p>前面说到，本次作业主要有两个难点：一个是递推函数，一个是三角函数化简。<br>针对递推函数，我采用字符串替换的方式，替换字符串后再对得到的字符串进行一次词法和语法分析并重复操作直到表达式中不含形如“f{n}(x)”的东西。要注意的是，在这里替换字符串的时候为了以防错误替换，可以先把第i个参数用“ai”替换，全部替换完后再将对应的“ai”替换为真正的实参。<br>针对三角函数的化简，其实难点在于如何判断两个三角函数是否相等或相反，也即三角函数内部的表达式是否相等或相反。这里我采用了一种比较暴力的方式，我想既然我们整个程序做的事情就是化简表达式，那我要判断两个表达式是否相等或相反，是不是可以把这两个表达式相加或相减，然后调用我们的程序其是否为零即可。综合各方面性能考虑，我最后决定只做 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.029ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2665 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1387,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1776,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2276,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ， <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.09ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2692 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(814,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1414,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1803,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2303,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ，以及正弦函数二倍角的化简，而且为了使最终结果的长度尽可能短，我在最后一步才化简，以防出现本来可以合并但在中途化简之后无法合并的情况。</p>
<h2 id="2-4Bug分析"><a href="#2-4Bug分析" class="headerlink" title="2.4Bug分析"></a>2.4Bug分析</h2><p>此次作业我出现了一些RE和WA以及TLE的错误，其中最主要的是RE错误。RE的原因是我在做递推函数的字符串替换时，忽略了可能嵌套函数的情况，导致我用的逗号下标可能是嵌套函数里面的逗号的下标，最后替换的结果自然是错的，为了修复这个问题，我添加在<code>Token</code>中添加了<code>Comma</code>这一类型，这样就能准确找到属于当前函数的逗号的下标，从而正确替换字符串。<br>而WA和TLE的原因在于我在合并<code>Unit</code>时，需要判断每个三角函数的幂次是否相同，但是我的三角函数在<code>Unit</code>里是用<code>HashMap&lt;String,Integer&gt;</code>来存储的，我对幂次相同的判断直接用的等号，但是显然等号是不适用于<code>Integer</code>内容的判相等的，因此出现了错误，当我改用<code>Objects</code>的<code>equals</code>方法后，问题就解决了。</p>
<h1 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h1><p>第三次作业添加了自定义普通函数和求导算子，自定义普通函数的处理方法和第二次作业的自定义递归函数的处理方法类似，而且更简单，只不过由于函数内部的因子多了自定义普通函数这一选项，在替换和解析的时候可能需要做一点改动。而关于求导，可以采用自下而上的方法，先把最基本的常数、幂函数和三角函数的求导实现，再实现项和表达式的求导。本次作业我在第二次作业的基础上进行迭代，添加的东西并不多。</p>
<h2 id="3-1程序架构"><a href="#3-1程序架构" class="headerlink" title="3.1程序架构"></a>3.1程序架构</h2><p><strong>UML类图</strong><br><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit1/hw3uml.png"></p>
<p><strong>新增类和功能</strong>  </p>
<ul>
<li><code>Deriva</code>：表达式基础结构，表示求导因子  </li>
<li><code>Funcparse</code>：新增解析普通函数功能  </li>
<li><code>Regofunc</code>：新增了两个普通函数规则  </li>
<li><code>Parser</code>、<code>Lexer</code>、<code>Token</code>：新增对求导因子的解析  </li>
<li>各类基本单元：新增求导方法</li>
</ul>
<h2 id="3-2代码复杂度"><a href="#3-2代码复杂度" class="headerlink" title="3.2代码复杂度"></a>3.2代码复杂度</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit1/hw3_complexity.png">  </p>
<p>本次复杂度和第二次作业类似，但由于我把读取字符串的行为放在了<code>Main</code>类里，而这次读取字符串需要读普通函数，因此条件语句可能会增多导致圈复杂度上升。  </p>
<h2 id="3-3Bug分析"><a href="#3-3Bug分析" class="headerlink" title="3.3Bug分析"></a>3.3Bug分析</h2><p>本次作业出现了几个RE和WA的错误。<br>RE是由于我在解析递推函数的参数个数时是靠逗号的个数来计算的，而此次由于递推函数表达式中可以出现普通函数，因此很可能会得到错误的参数个数，针对此问题，我修改为只考察等号左边是否有逗号，这样可以省去对右边复杂的分析。<br>WA是由于我没有考虑嵌套求导的情况，我原本的<code>Deriva</code>类里有<code>toentirety()</code>和<code>derivative()</code>两个方法，但这两个方法完全一样，因此导致嵌套求导时该求多次导的表达式只求了一次导，针对该问题，我将<code>toentirety()</code>方法修改为求一次导，将<code>derivative()</code>方法修改为求两次导，这样便修复了Bug。  </p>
<h1 id="TalkTalk"><a href="#TalkTalk" class="headerlink" title="TalkTalk"></a>TalkTalk</h1><h2 id="程序优缺点总结"><a href="#程序优缺点总结" class="headerlink" title="程序优缺点总结"></a>程序优缺点总结</h2><p>仅针对重构后的程序<del>（重构前的优点是写的复杂）</del><br><strong>优点</strong>  </p>
<ul>
<li>层次清晰，类设计合理，基本实现高内聚低耦合<br><strong>缺点</strong>  </li>
<li>代码写得有点冗余，有些部分可能出现了好几次，这时应该把其抽象出来为一个方法  </li>
<li>性能不够优秀，判断表达式相等或相反直接调用整个程序，在嵌套很深的时候会出现卡死的情况，可以考虑重写<code>Hashcode</code>来方便判断。  </li>
<li>没有实现更多的化简，这也主要是由于对判相等方法性能的担忧，若修改了判想等方法，应该能实现更多化简。</li>
</ul>
<h2 id="新迭代情景"><a href="#新迭代情景" class="headerlink" title="新迭代情景"></a>新迭代情景</h2><p>加入指数函数以及自定义分段函数（自定义分段函数内的因子一定满足在某个确切的自定义分段范围内，比如常数因子，或者表达式（x^2-2*x+1）等）。<br>针对指数函数较好实现，只需新增一个实现接口<code>Factor</code>的类，并添加相应的求导方法即可。<br>针对自定义分段函数需要新增解析其规则的方法，而若因子为常数，只需判断其在哪个区间并代入相应函数表达式即可，对于含变量x的因子，可以新建一个方法（直接代值计算）去判断其属于哪个区间并代入相应函数表达式。</p>
<h2 id="hack策略"><a href="#hack策略" class="headerlink" title="hack策略"></a>hack策略</h2><p>这三次作业我都成功hack到了同组的同学，尤其是第三次几乎将组内所有同学都hack了。我的策略是自己设计数据，从简到繁，且充分考虑特殊情况。拿第三次作业来说，我先从sin(0)^0这样的数据开始，然后到求导，设计一些可能出错的求导样例去验证大家求导实现得是否正确，最后添加函数，并考虑嵌套函数等情况。<br>可能有部分同学用评测机来进行该环节，单个人认为数据生成器生成的数据随机性过大，可能运行很久也没有一个有效的样例能hack到别人，而如果是生成了十分复杂的数据造成同学tle，可能又会因为cost的限制而难以修改到能够成功提交。但我认为评测机针对我们自己查自己bug还是十分重要的，尤其是针对强测环节，而这也是由于其生成数据的随机性。</p>
<h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><h3 id="1）Don’t-be-reckless"><a href="#1）Don’t-be-reckless" class="headerlink" title="1）Don’t be reckless"></a>1）Don’t be reckless</h3><p>我们拿到一个题目或需求或想法时，不应一上来就开始敲键盘，这样不计后果的行为是十分危险的，没有经过充分的理解题目和需求，没有经过充分地思考，没有经过精心的设计，直接开始写代码很大概率会写出一个极难阅读、理解和维护的怪物。而且当你写着写着很可能会想起好像还有什么需求没有实现又去修改前面写的代码，这样在写的过程中不断的进行修改，写程序本应是伴随修改的，但应该是负责任的修改，是考虑过的修改，而不是鲁莽随意的修改。因此，在开始写代码前，我们应该对自己的架构有了一个基本的认知，清楚的知道自己的需求和目标是什么，这样才能使整个项目层次尽可能清晰，方便后续的阅读和修改。</p>
<h3 id="2）be-careful"><a href="#2）be-careful" class="headerlink" title="2）be careful"></a>2）be careful</h3><p>谨慎，既在思考设计时，又在编写程序时，还在回顾修改时。在三个阶段都应该保持谨慎的心态，尽可能去思考自己的程序是否有什么情况还没有考虑到。我便是忽略了这一点，写完总是认为自己的程序应该没什么问题了，导致强测常会出一些错误。</p>
<h3 id="3）be-stern"><a href="#3）be-stern" class="headerlink" title="3）be stern"></a>3）be stern</h3><p>这里我不是想说要认真的意思，我想表达的是我们可以逼自己一把，对自己狠一点，做一做自己不敢做的事，比如化简，做一做自己不想做的事，比如重构，做了这些，我们首先会积累到相应的经验，总结到方法，能提升自己的能力，还能进一步加强对架构的理解，理解某种架构为什么好，好在哪里。</p>
<h3 id="4）be-exclamatory"><a href="#4）be-exclamatory" class="headerlink" title="4）be exclamatory"></a>4）be exclamatory</h3><p>我在unit1经常感叹别人的设计，别人的方法，无论是上机时发给我们的代码还是往届学长学姐们的博客以及讨论区大家的发言，很多时候我都会想起余华老师评价莫言老师那句“**，写得那么NB”。学习和运用这些架构和方法，也让我的代码变得更好，让我逐渐学会怎么写出优雅的代码，让我对项目设计有了更深的理解。我认为本单元交给我最重要的方法就是递归下降法，但交给我最重要的思想是架构设计的思想，什么时候该分一个类，类里面该干什么事，怎样降低不同类之间的耦合度，怎样让项目可维护性更好……我在上学期除了OOPre之外还修了一门java程序设计，那门课的大作业是写一个工作量为2000行代码的程序，我写了一个创新的贪吃蛇游戏，其实逻辑并不复杂，但由于涉及到GUI，仍然需要去设计相应的架构，设计不同的面板之间的关系，不同类中的方法，但我当时写得很杂，几乎是每一关就对应了一个类，很多该抽象出来的方法和类并没有抽象出来，导致代码非常冗余，且修改起来也十分头疼，当时为了修复一个很奇怪的bug找了半天对应的代码位置。所以我是真的十分感叹unit1中遇到的所有设计和方法，当然不能止于感叹，还要运用，化为自己的东西才有用。</p>
<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><ul>
<li>可以介绍一下项目的度量分析的各类指标分别是什么，是由什么决定的，反映了什么，这样能让大家在度量分析后对自己的代码有更深的认识</li>
<li>提交hack数据时可以返回给我们提交数据的相应cost，这样在cost超过限制时，我们能够好地去修改数据</li>
</ul>
]]></content>
      <categories>
        <category>面向对象(BUAA)</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>2025_BUAA_OO_Unit3</title>
    <url>/2025/05/15/OO/oo_Unit3/</url>
    <content><![CDATA[<p><a href="/file/oo/第九次作业-2025面向对象设计与构造-面向对象设计与构造.md">作业9传送门</a><br><a href="/file/oo/第十次作业-2025面向对象设计与构造-面向对象设计与构造.md">作业10传送门</a><br><a href="/file/oo\第十一次作业-2025面向对象设计与构造-面向对象设计与构造.md">作业11传送门</a><br>OO第三单元的主题是JML规格化设计，通过社交网络的例子让我们学会遵守规格，并在规格的限制内灵活实现规格。本单元看似难度不大，但想要顺利通过强测互测，需要仔细考虑所采用的数据结构以及算法。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>单元测试是对程序中的最小的可测部分进行测试，一般就是我们在各种类里面实现的方法。该测试能够确保每个单元能够独立正确工作，及时进行单元测试能够尽量保证我们程序的正确性，但是编写单元测试的过程可能较为繁琐，同时需要尽可能地覆盖到方法的每一个分支及边缘情况，这样才能确保测试的准确性。</p>
<h2 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h2><p>功能测试是指从用户的角度触发去验证程序功能是否符合规格。这对于规格化设计来说是十分重要的。对程序进行功能性测试时，一般要根据面向规格来构造数据，然后进行手动或自动化测试。功能测试能够尽量保证功能实现正确，但对程序内部实现逻辑不过多关注，这也容易造成一些结果正确但逻辑错误的隐藏bug难以被发现。</p>
<h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>集成测试是将已经通过单元测试的单元组合在一起进行测试，验证这些单元之间的交互是否正确。其能够检测到单元之间的交互问题，提高系统的整体质量。但是对于复杂的程序实现，多个方法之间相互联系的情况，集成测试的成本会很高，因为要考虑这些方法之间的交互情况。</p>
<h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>压力测试是通过模拟高负载的情况，测试系统在极限条件下的性能表现。在互测时很多同学想要检测其他同学是否有TLE的产生对相应程序进行测试应该都是压力测试。压力测试能够提高程序在高负载情况下的可靠性，但如何去模拟这样的高负载情况是压力测试的一大难点。</p>
<h2 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h2><p>回归测试是在软件修改后重新进行测试，以验证修改是否引入了新的问题。课程的bug修复环节就是典型的回归测试。回归测试保证我们出于增删功能、修复错误、改善性能等需求而对程序进行的修改没有对其他功能产生负面影响。这对于程序的迭代等有重要意义。</p>
<h2 id="数据构造策略"><a href="#数据构造策略" class="headerlink" title="数据构造策略"></a>数据构造策略</h2><p>本单元的背景是一个社交网络，里面还有公众号、文章、信息等元素，所有这些元素都可以被一张图展示得很好，因此，构造数据时考虑的其实就是图中点和边的关系。我在进行数据构造时主要有两个策略，一个是随机生成，另一个是面向JML构造数据。<br>随机生成比较简单，即人、关系等等都完全随机的生成，但是这有个毛病，虽然本单元的输入几乎没什么限制，只要你按照指令格式给予程序指令，那么都有异常处理帮你兜底，但如果完全随机，可能会导致一直在异常处理，所以随机生成也要不那么随机。比如我们可以建立目前已有的人的集合，已有的关系集合等，这样能够方便我们在生成其他指令时能够限制随机的范围，让数据更加合理。<br>面向JML构造数据就需要根据相关的JML描述来构造特定数据，这些数据一般都是一些特殊情况下的数据，或者是压力数据，常拿来对一些可能忽视的小点或者程序整体性能测试。比如说针对某个查询方法，根据其JML可能会发现该操作的时间复杂度可能较高或是与当前类的其他属性相关联，那构造数据的时候就可以先修改其他属性，在进行查询，这样一直循环，构造一个压力数据。</p>
<h1 id="大模型体验"><a href="#大模型体验" class="headerlink" title="大模型体验"></a>大模型体验</h1><p>其实本单元我并未太多使用大模型，使用大模型的情景更多地是询问其相关数据结构的实现以及性能改善的建议。但是在完成本单元的代码作业后再回顾，发现确实有很多地方可以通过大模型来减少自己的工作量，但需要良好地引导大模型才能提高效率，我认为可以根据以下步骤让大模型对我们的实现过程提供帮助：  </p>
<ul>
<li>将JML规格提供给大模型，让其分析完整个项目的JML规格并给予我们有关每个类的内部属性使用哪种数据结构的反馈。</li>
<li>让大模型分析出哪些方法的实现较为复杂，并提供实现它的简要思路以及推荐相关算法。</li>
<li>让大模型分析出哪些方法的实现可能因为一些潜在的难以察觉的因素而出错，并列举出相关因素。</li>
<li>根据大模型的反馈完成代码，途中可以不断询问大模型有关数据结构或算法的疑惑。</li>
<li>将实现好的代码提供给大模型让其分析可能存在的bug，以及询问其是否有性能优化的推荐，并根据反馈修改代码。</li>
<li>在个人发现某些需要改善的点后，针对性地向大模型询问改善的建议，比如有关性能，要将自己现在使用的方法提供给大模型，并提供给大模型预期实现的效果，比如我现在的方法时间复杂度是o(n)，我想优化到o(1)，那就要给大模型讲清楚需求，并理性采纳其建议。</li>
</ul>
<p>以上步骤及引导方法是我对本单元三次作业的认真回顾下所想出的，拿第一条来举例，我们实现代码首先写的肯定都是一个类里面的相应属性，不会一上来就写类的方法，而像一些数组属性，JML里面不会规定你实现的数据结构，我们需要自己选择，但选择哪种数据结构肯定又要根据使用该属性的方法来确定，而我们就算通读了整个JML，大概理解了每个方法要干什么，但通读下来之后可能仍然对每个方法的内部实现不清晰，要真正到了编写相应方法的代码时，才能加深对方法内部的理解，而这时便可能会发现相关属性的数据结构使用不当而回去调整，我在完成作业时就经常遇到该问题，如果能在一开始就确定要使用的数据结构，那一定能提高不少效率。</p>
<h1 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h1><p>由于本单元要求我们按照规格实现代码，所以整体上的架构都是JML给出的，简单来说就是一个社交网络负责添加人员、添加关系、修改关系、管理公众号和文章、管理消息等。</p>
<h2 id="图模型构建"><a href="#图模型构建" class="headerlink" title="图模型构建"></a>图模型构建</h2><p>社交网络中，很自然地把人作为点，同时在Person内部通过一个HashMap来存储和其他人的关系，也就是整个图里面的边，有关其他元素，例如文章或公众号等，也在Person内部通过HashMap或其他数据结构进行存储，同时在Network里面也用一个大的容器来存储这些元素方便管理。</p>
<h2 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h2><p>整个社交网络里面需要维护的东西十分多，因为涉及到很多查询方法，为了尽可能使查询的性能较优，对于大多数查询方法我们都需要对所查询的内容进行维护。<br>比如Tag里面的平均年龄，年龄方差、不同人之间的社交价值总和等，需要在每一次在tag内部相关属性发生改变时对这些属性进行实时修改来维护，同理对Person的最好朋友、OfficialAccount里面的最佳贡献者等等。需要注意的是，维护的时候不能只将目光聚焦在某个类的内部实现中，很有可能在大的Network中也存在某些修改影响到了某些类的内部属性，这时也需要进行维护。</p>
<h1 id="规格理解"><a href="#规格理解" class="headerlink" title="规格理解"></a>规格理解</h1><p>规格限制了我们方法的参数、返回结果等，但是对于整个方法的实现并没有做特别的限制，因此根据一个方法的规格可以有很多种实现该方法的思路，这也是大家都按照规格完成代码但性能差距巨大的原因，在本单元中，我也遇到了很多性能问题，修复这些性能问题是整个单元最为艰巨的任务。</p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li>在本单元第一次作业，对于查询联通的方法，我使用了并查集算法，但仍然未能顺利通过强测每一个点，但是原因也非常诡异。我首先是对并查集进行缓存，也就是如果没有删除关系，那我就会继续使用上一次建立的并查集，当有关系被删除时，我会重新建立并查集，但这样修改后并没有提升我太多的性能，强测未通过的点仍然没通过。再之后我检查了我建立并查集的实现，发现我建立并查集时采用了广度优先遍历的思想，这让我在建立并查集的时候就耗费了不少时间，我将其修改为按点建立后通过了原来大部分未通过的点，但仍有一个点没有通过。最后我将按点建立修改为按边建立后，诡异地通过了最后一个点，至今我仍然觉得匪夷所思，因为这样的修改仅仅只是让原来的时间复杂度除2而已，但整体上来看二者的时间复杂度仍然是相同的。</li>
<li>本单元第二次作业，虽然强测通过的点较第一次更多，但实际上遇到了更多的性能问题，分别有如下：</li>
<li><ul>
<li>我在实现Person内部的文章数组时使用的是LinkedList结构，但这样在删除文章的时候复杂度就会是o(n)，又因为Network里面进行删除文章操作时还需要对所有人遍历，这样时间复杂度就飙升到了o(n^2)，因此需要一种数据结构来让在头部增加元素以及删除元素的时间复杂度都是o(1)，这样才能解决这个问题，我通过链表加HashMap的一个结构解决了该问题。</li>
</ul>
</li>
<li><ul>
<li>对于qba方法，没有在Person内部维护导致时间复杂度为o(n)，整体导致了qcs的复杂度为o(n^2)，在Person内部维护最好的朋友之后解决了该问题。</li>
</ul>
</li>
<li><ul>
<li>对于qtvs方法，没有在Tag内部维护相应的valuesum，改为动态维护之后解决了该问题。</li>
</ul>
</li>
<li>本单元第三次作业并没有什么特别的涉及性能的问题，很多性能问题还是前两次作业的，因此前两次作业如果将能优化的地方尽可能优化之后，第三次作业也不太可能出现性能问题。</li>
</ul>
<h2 id="规格与实现分离的理解"><a href="#规格与实现分离的理解" class="headerlink" title="规格与实现分离的理解"></a>规格与实现分离的理解</h2><p>规格只是对参数、结果以及一些不变量的限制，并不限制我们实现方法的细节，同理对属性，就比如有一个List[]型的属性，你大可以选择ArrayList、HashMap、HashSet等去实现它，只要你选择的数据结构方便你在方法中的使用即可，对方法也是，你完全可以选择不同的算法去实现，只要结果以及不变式满足规格说明即可，这也要求我们就算按照规格实现程序也不能照着规格就开写，而是要大致对实现的东西有了自己的理解之后再去编写代码。</p>
<h1 id="Junit测试"><a href="#Junit测试" class="headerlink" title="Junit测试"></a>Junit测试</h1><p>在对一个方法编写Junit测试时，其JML规格是我们编写测试的一个很好的参考。因为JML里面的描述一般是针对该方法的朴素实现，因此方便我们在编写测试时避免使用自己实现的其他结构，而是按照朴素的实现来获取方法的正确结果，这样能有效防止因为自己实现的其他结构的错误而导致的测试不准确。<br>同时，JML规格还能为我们构造数据提供思路，比如一些边界情况等，我在自己编写本单元的Junig测试时就通过伪随机生成、完全图生成、空图生成这三种数据生成策略来为测试提供数据，并取得了较好的测试结果。<br>我们的Junit测试还需根据JML的描述来检验方法的实现，具体来说，不能只检验方法的结果正确性，还要检验方法的实现是否满足规格中的不变式限制，以及是否产生了副作用等，这样才能保证代码实现与规格一致。</p>
<h1 id="学习体会"><a href="#学习体会" class="headerlink" title="学习体会"></a>学习体会</h1><p>通过本单元的学习，我了解到了契约式设计，并认识到这是一种较为安全的设计模式。同时在完成作业的过程中我也深刻体会到了规格与实现分离，意识到契约式设计不是死的，而是活的，留给程序员操作的空间仍然是巨大的。同时通过本单元的作业，我更深地意识到数据结构和算法对于程序设计的重要性，当同样一个需求，别人的程序只需要你的十分之一的时间就能完成的时候，你会感到难以置信，而现实中的众多用户肯定是希望自己的需求能尽快得到解决，所以我认为这对于我们未来对实际项目的开发的启发意义是重大的。</p>
]]></content>
      <categories>
        <category>面向对象(BUAA)</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记（指令篇）</title>
    <url>/2025/02/13/linux/linux%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><p>在Linux系统中，目录结构与Windows系统类似，都是树形结构，不同的是，Windows系统可以有多个树，也即其能有很多个磁盘，但Linux系统只有一棵树，即所有文件和目录都放在根目录下。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/linux/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png"
                     
                ><br>Linux系统中，以“&#x2F;”表示顶级目录即根目录，层次关系也通过“&#x2F;”表示</p>
<h2 id="路径格式"><a href="#路径格式" class="headerlink" title="路径格式"></a>路径格式</h2><ul>
<li>绝对路径：即以根目录“&#x2F;”开头</li>
<li>相对路径：相对于当前工作目录下的路径，例如当前工作目录下有一个test目录，则其相对路径就是test</li>
<li>特殊路径符：</li>
<li><ul>
<li>.:表示当前目录</li>
</ul>
</li>
<li><ul>
<li>..:表示上一级目录</li>
</ul>
</li>
<li><ul>
<li>~:表示HOME目录</li>
</ul>
</li>
</ul>
<h1 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h1><p>在Linux系统中，每一条命令都是一个可执行的程序，命令都按以下格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span>+(option)+(parameter)</span><br></pre></td></tr></table></figure></div>
<ul>
<li>command即指令名，如ls,cd,mkdir……</li>
<li>option是选项，用来执行一些特定的操作</li>
<li>parameter是相关参数，通常是文件或目录路径</li>
</ul>
<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span>+(-a -l -h)+(parameter)</span><br></pre></td></tr></table></figure></div>
<p>ls命令的作用是查看相应的目录里的内容，如果不加参数，则默认展示当前工作目录的内容，加上参数则会展示指定目录的内容。<br>该指令有三个选项可选：</p>
<ul>
<li>-a 将该目录里的所有内容展示，包括隐藏内容</li>
<li>-l 以列表的形式将目录里的内容展示，同时把文件或文件夹所属的用户，用户组，相关权限以及文件大小展示出来</li>
<li>-h 必须结合-l使用，可以将文件大小显示的更加清晰</li>
</ul>
<h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>+(parameter)</span><br></pre></td></tr></table></figure></div>
<p>cd命令的作用是切换工作目录到指定目录，如果不加参数，则默认切换到用户的HOME目录，一般是&#x2F;home&#x2F;username</p>
<h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></div>
<p>pwd命令的作用是展示当前工作目录</p>
<h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span>+(-p)+parameter</span><br></pre></td></tr></table></figure></div>
<p>mkdir命令的作用是创建新的目录，参数必填<br>-p选项表示自动创建不存在的父目录，这样可以创建一个当前目录下很多层的目录</p>
<h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span>+parameter</span><br></pre></td></tr></table></figure></div>
<p>touch命令的作用是创建一个文件</p>
<h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span>+parameter</span><br></pre></td></tr></table></figure></div>
<p>cat命令的作用是查看文件内容</p>
<h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">more+parameter</span><br></pre></td></tr></table></figure></div>
<p>more命令的作用也是查看文件内容，但它会将内容非常多的文件一页一页的展示，通过空格翻页，按q退出查看</p>
<h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span>+(-r)+parameter</span><br></pre></td></tr></table></figure></div>
<p>cp命令的作用是复制文件或文件夹，需要两个参数，第一个是要复制的文件或文件夹的路径，第二个是要复制去的地方，-r选项在复制文件夹的时候使用</p>
<h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span>+parameter</span><br></pre></td></tr></table></figure></div>
<p>mv命令的作用是移动文件或文件夹，同样需要两个参数，第一个是要移动的文件或文件夹的路径，第二个是要移动去的地方，若目标不存在，则进行改名</p>
<h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span>+(-r -f)+parameter</span><br></pre></td></tr></table></figure></div>
<p>rm命令的作用是删除文件或文件夹，参数必填，数量不限，-r选项表示删除文件夹，-f选项表示强制删除，一般在以root用户登录的情况下使用</p>
<h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">which</span>+parameter</span><br></pre></td></tr></table></figure></div>
<p>which命令的作用是查看命令的程序文件存放在哪里，因此这里的参数是命令名</p>
<h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">find+起始路径+ -name/-size +<span class="string">&quot;被查找文件名&quot;</span>/<span class="string">&quot;+-NMGB&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>find命令的作用是搜索指定的文件，首先要指定起始路径，再选择是以文件名的方式搜索还是以文件大小的方式搜索，以文件名方式搜索需要填写文件名称，以文件大小搜索需要填写相应的文件大小范围，其中“+”代表大于，“-”代表小于。</p>
<h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">grep+(-n)+parameter</span><br></pre></td></tr></table></figure></div>
<p>grep命令的作用是从一个文件中过滤相应的文件行，需要两个参数，第一个是过滤的关键字，第二个是文件的路径，-n选项可选，用来显示匹配的行的行号</p>
<h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">wc</span>+(-c -m -l -w)+parameter</span><br></pre></td></tr></table></figure></div>
<p>wc命令的作用是统计文件的行数，单词数量，若不加选项，则会以行数、单词数、字节数的顺序显示相关数量，而其可选的四个选项意义如下：</p>
<ul>
<li>-c 统计字节数量</li>
<li>-m 统计字符数量</li>
<li>-l 统计行数</li>
<li>-w 统计单词数</li>
</ul>
<h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span>+parameter</span><br></pre></td></tr></table></figure></div>
<p>echo命令的作用与printf函数类似，将指定内容输出到命令行里面，若内容过于复杂可以加上引号（有空格等特殊符号）</p>
<h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span>+(-f -num)+parameter</span><br></pre></td></tr></table></figure></div>
<p>tail命令的作用是拿来查看文件尾部内容，其中参数部分是文件的路径。选项意义：</p>
<ul>
<li>-f 代表持续追踪，可以用来查看文件变换</li>
<li>-num 指定要查看的行数，若不带此选项，则默认查看尾部十行</li>
</ul>
<h1 id="进阶命令"><a href="#进阶命令" class="headerlink" title="进阶命令"></a>进阶命令</h1><h2 id="tree命令"><a href="#tree命令" class="headerlink" title="tree命令"></a>tree命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">tree+(-a -d)+parameter</span><br></pre></td></tr></table></figure></div>
<p>tree命令的作用和ls命令类似，不过其可以根据文件目录生成文件树，参数部分是文件或目录的路径。<br>选项意义：</p>
<ul>
<li>-a 代表列出全部文件</li>
<li>-d 只列出目录</li>
</ul>
<p><strong>tree命令可能需要安装之后才能使用，使用yum&#x2F;apt……安装即可</strong></p>
<h2 id="diff命令"><a href="#diff命令" class="headerlink" title="diff命令"></a>diff命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">diff+(-b -B -q)+file1+file2</span><br></pre></td></tr></table></figure></div>
<p>diff命令用于比较文件的差异。<br>选项意义：</p>
<ul>
<li>-b 不检查空白字符的不同</li>
<li>-B 不检查空行</li>
<li>-q 仅显示有无差异，不显示详细信息</li>
</ul>
<h2 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">sed+(-n -i -e)+<span class="string">&#x27;command&#x27;</span>+input</span><br></pre></td></tr></table></figure></div>
<p>sed命令的作用是对文件进行处理，其可以将数据进行替换、删除、新增、选取等。相较于一般的命令形式，sed命令需要一个单独的“command”，而input即是输入文本。<br>“command”内容及作用：</p>
<ul>
<li>[行号]+a+[内容] 该命令的作用是在对应行号的行后新增一行，其内容即为所输入的内容。行号可以是数字，代表某一特定的行，也可以是“起始行，终止行”的形式，代表在所属范围的每一行后都新增内容为输入内容的一行，其中$代表最后一行，$-1代表倒数第二行，以此类推，如果忽略行号部分，则代表对每一行都进行操作。（后续command里的行号和该条相同）</li>
<li>[行号]+c+[内容] 用输入的内容取代相应行</li>
<li>[行号]+i+[内容] 在当前行的上面插入一行文本，内容为输入内容</li>
<li>[行号]+d 删除相应行的内容</li>
<li>[行号]+p 输出选择的内容，通常与-n选项搭配使用</li>
<li>[行号]+s&#x2F;re&#x2F;string(&#x2F;g) 将re(正则表达式)匹配的内容替换为string，如果没有&#x2F;g，则只会将每一行匹配的第一个字符串替换为string，而加上&#x2F;g则表示在整行范围内替换。</li>
</ul>
<p>选项意义：</p>
<ul>
<li>-n sed默认将文件所有内容输出，而该选项可以使其只显示经过它处理的内容</li>
<li>-i 直接修改读取的内容，而不是输出到屏幕，若没有该选项则原文件不会发生变化</li>
<li>-e 允许在同一行里执行执行多条命令</li>
</ul>
<h2 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h2><p>格式：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">awk+(-F -v -f)+<span class="string">&#x27;模式 &#123;操作&#125;&#x27;</span>+输入文件</span><br></pre></td></tr></table></figure></div>
<p>awk是一个功能十分强大的文本处理工具，其可以进行数据提取、文本处理、模式匹配、报告生成和自动化任务等。要能够运用awk命令，我们要知道以下内容：</p>
<ol>
<li>模式是什么：模式可以是一个正则表达式，也可以是一个条件表达式，表示对于匹配或满足条件的行再进行操作，其也可以是空，这时就代表对所有行进行操作。还有一些特殊模式，比如<code>BEGIN</code>和<code>END</code>，后面紧跟一个操作，分别代表在处理任何输入之前执行的操作，处理完所有输入后执行的操作。</li>
<li>字段和变量：awk需要用内置的变量来处理文本数据，有以下常用的变量:</li>
</ol>
<ul>
<li>$0：表示当前行的完整内容</li>
<li>$1，$2，$3……：表示当前行的第几个字段（由字段分隔符分隔）</li>
<li>NF：表示当前行的字段数</li>
<li>NR：表示当前行的行号</li>
<li>FS：字段分隔符，默认为空格或制表符</li>
<li>OFS：输出字段分隔符，默认为空格</li>
<li>ORS：输出记录分隔符，默认为换行符</li>
</ul>
<p>选项意义：</p>
<ul>
<li>-F 指定字段分隔符</li>
<li>-v 设置变量的初始值</li>
<li>-f 从文件中读取awk脚本</li>
</ul>
<p>举些例子更好理解  </p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print&#125;&#x27;</span> filename <span class="comment">#打印文件中所有行</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> filename <span class="comment">#打印文件中的第二列</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk <span class="string">&#x27;/pattern/ &#123;print&#125;&#x27;</span> filename <span class="comment">#打印包含特定模式的行</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk <span class="string">&#x27;NR&gt;=3 &amp;&amp; NR&lt;=5 &#123;print&#125;&#x27;</span> filename <span class="comment">#打印第三行到第五行</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk -F, <span class="string">&#x27;&#123;print $1,$3&#125;&#x27;</span> filename <span class="comment">#以逗号为字段分隔符，再打印第一列和第三列</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk <span class="string">&#x27;$2&gt;10 &#123;print&#125;&#x27;</span> filename <span class="comment">#打印第二列大于10的行</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk <span class="string">&#x27;/ERROR/ &#123;count++&#125; END &#123;print &quot;Error count:&quot;, count&#125;&#x27;</span> log.txt</span><br><span class="line"><span class="comment">#统计文件里有ERROR的行数</span></span><br><span class="line"><span class="comment">#------------------------------------------------------------------------------</span></span><br><span class="line">awk -F, <span class="string">&#x27;BEGIN &#123;OFS=&quot;:&quot;&#125; &#123;print $1, $2, $3&#125;&#x27;</span> data.txt</span><br><span class="line"><span class="comment">#以逗号为字段分隔符，并以分号为输出字段分隔符将第一、二、三列输出</span></span><br></pre></td></tr></table></figure></div>
<h1 id="一些特殊的符号"><a href="#一些特殊的符号" class="headerlink" title="一些特殊的符号"></a>一些特殊的符号</h1><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h2><p>管道符符号：<code>|</code><br>作用：将左边命令的输出作为右边命令的输入，例如：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.txt | grep <span class="string">&quot;something&quot;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h2><p>被反引号修饰（包围）的字符串会作为命令来执行，例如：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></div>
<p>输出结果为<code>pwd</code><br>但</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">pwd</span>`</span><br></pre></td></tr></table></figure></div>
<p>输出结果则是当前工作目录</p>
<h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>分为输入重定向符和输出重定向符。</p>
<ul>
<li>输入重定向符：<code>&lt;</code>，代表将右边的内容（文件……）作为输入传给左边的指令，例如现在有一个可执行文件out，需要传入一个参数，正常执行可以写为：</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./out parameter</span><br></pre></td></tr></table></figure></div>
<p>但若现在已经有一个文件a.txt含有了我们想要的输入参数，则可以通过输入重定向符来实现：</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">./out &lt; a.txt</span><br></pre></td></tr></table></figure></div>
<ul>
<li>输出重定向符：将左边命令的结果写入右边的文件</li>
<li><ul>
<li>覆盖输出重定向符：<code>&gt;</code>，左边命令的结果将会覆盖文件原有的内容</li>
</ul>
</li>
<li><ul>
<li>追加输出重定向符：<code>&gt;&gt;</code>，左边命令的结果将会追加到文件的末尾，文件原有内容仍会保留</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>2025_BUAA_OO_Unit2</title>
    <url>/2025/04/14/OO/oo_Unit2/</url>
    <content><![CDATA[<p>OO第二单元的主题是多线程编程，旨在通过生活中的常见例子来让我们理解并掌握多线程编程思想，同时能够编写代码正确实现多线程的同步和互斥，解决线程安全和线程交互问题。<br>本单元围绕电梯调度这个生活中极为常见的例子开展三次作业，在满足正确性的情况下，我们还需对电梯整体调度进行设计尽可能优化性能。<br>我完成这三次作业的过程不能用轻松来形容，线程安全和线程交互中出现的问题总是让我头疼，甚至一度认为 <del>多线程编程极不安全</del> ，但其实仔细思考后会发现线程安全和线程交互的问题都是可以通过设计来解决的，只不过针对于不同的架构和方案，相应的解决方案的复杂程度可能不同。整体来说，三次作业的完成是痛苦的，但收获也是丰富的。</p>
<h1 id="第一次作业"><a href="#第一次作业" class="headerlink" title="第一次作业"></a>第一次作业</h1><p>第一次作业的要求较为简单，每个乘客会指定一部电梯乘坐，也就是说我们无需再考虑每一个乘客到底该分配给哪一个电梯，只需单独针对一个电梯来考虑相应的调度策略。  </p>
<h2 id="1-1-调度设计"><a href="#1-1-调度设计" class="headerlink" title="1.1 调度设计"></a>1.1 调度设计</h2><p>本次作业每个乘客均指定了电梯，因此在调度上可以有两种思想，一种是采用中央调度器，另一种是每个电梯有自己的调度器，通过自己的请求队列来进行调度。由于我的设计是有分配线程存在的，也即当其拿到了一个请求后，在能竞争资源的情况下，会马上将请求分配给对应的电梯，因此我采用的是第二种思想。因此我的调度器其实是电梯线程内部的一个设计，直接在线程内工作，使用电梯请求队列这一资源，这一资源是原子性的，因此能够保证线程安全。  </p>
<p><strong>调度策略</strong><br>有关单部电梯调度，已经有很多算法，比如LOOK算法，ALS算法，SATF算法等，但由于三次作业都加入了乘客的优先级这一因素，因此直接使用这些算法并不能很好的考虑到这一因素，可能会导致最终的性能不理想。因此我设计了自己的调度算法。  </p>
<p>我的调度算法是基于SATF算法设计的，同时将LOOK算法和ALS策略考虑的因素也纳入进来。SATF算法是通过对每一个要素分配一个权重，最后根据标准化数据和权重计算每个请求的得分，将得分最高的请求纳入自己的接送队列。针对这三次作业，显然要为乘客的优先级这一因素分配权重，但这还不够，参考LOOK算法和ALS策略后，我将请求离电梯的距离以及相对方向也考虑进来，并为这三个要素分配权重。怎么分配权重又是一个问题，如果简单的为这三个要素指定权重，可能不够严谨，怎样做最严谨呢？根据已有数据来进行分析，采用熵权法计算出每一个要素的权重，这样应该是计算权重最严谨的方法了，但可惜的是似乎并没有这样一份数据包含了乘客的优先级，况且请求离电梯的距离以及相对方向这两个因素是动态的，而不是静态的，因此使用熵权法来计算权重是不现实的，因此我采用层次分析法来计算权重，这样既能保证一定的严谨性，又能保证一定的合理性。  </p>
<p>判断矩阵如下：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.803ex;" xmlns="http://www.w3.org/2000/svg" width="28.288ex" height="2.737ex" role="img" focusable="false" viewBox="0 -855 12503.1 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M152 251Q152 646 388 850H416Q422 844 422 841Q422 837 403 816T357 753T302 649T255 482T236 250Q236 124 255 19T301 -147T356 -251T403 -315T422 -340Q422 -343 416 -349H388Q359 -325 332 -296T271 -213T212 -97T170 56T152 251Z"></path></g><g data-mml-node="mtable" transform="translate(458,0)"><g data-mml-node="mtr" transform="translate(0,-10)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mtext" transform="translate(793.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(1043.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(5543.6,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(7043.6,0)"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mtext" transform="translate(793.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(1043.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(9587.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(11087.1,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(12045.1,0) translate(0 -0.5)"><path data-c="29" d="M305 251Q305 -145 69 -349H56Q43 -349 39 -347T35 -338Q37 -333 60 -307T108 -239T160 -136T204 27T221 250T204 473T160 636T108 740T60 807T35 839Q35 850 50 850H56H69Q197 743 256 566Q305 425 305 251Z"></path></g></g></g></g></svg></mjx-container></p>
<p>在根据经验得到判断矩阵后，我计算出了三个因素对应的权重，分别是相对方向：0.5，请求离电梯距离：0.25，优先级：0.25（似乎和直接分配权重没啥区别（流汗））。计算好权重后，就可以计算每个请求的得分了，具体来说，假设请求离电梯的距离为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="8.423ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 3723 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(865,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1334,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1695,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2224,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2824,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(3257,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container> ，优先级为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="7.762ex" height="1.959ex" role="img" focusable="false" viewBox="0 -661 3431 866"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1784,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2235,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2580,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2941,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> ,相对方向为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.063ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 4006 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(520,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(865,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1316,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1782,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(2215,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2576,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2921,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3406,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container> ，那么其得分为：<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="61.215ex" height="3.601ex" role="img" focusable="false" viewBox="0 -1231 27057 1591.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(902,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1387,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1838,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(2581.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3637.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(5137.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(6138,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(6658,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7003,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(7454,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(7920,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(8353,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(8714,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9059,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9544,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(10366.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(11366.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(13366.7,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(14366.9,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(389,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2167,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(2687,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3032,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(3501,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3862,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(4391,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4991,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(5424,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mo" transform="translate(5890,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(2086.4,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><rect width="4639.9" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(19469,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(20469.3,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(22469.5,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mfrac" transform="translate(23469.7,0)"><g data-mml-node="msqrt" transform="translate(220,555.3) scale(0.707)"><g transform="translate(1020,0)"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1299,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1784,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2235,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2580,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2941,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(0,27.9)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path></g><rect width="3431" height="42.4" x="1020" y="835.5"></rect></g><g data-mml-node="mn" transform="translate(1440.1,-345) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><rect width="3347.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>电梯运行时，每次从自己的请求队列中选择一个得分最高的请求，若电梯未满，如果电梯为空，则将其放入电梯的接送队列，若电梯非空，则需请求得分大于0.5时才会将其放入电梯接送队列。这样设计能够满足优先级的考虑，同时时间上也会优于LOOK算法，也避免了电梯反复横跳的情况，防止其非正常耗电。</p>
<h2 id="1-2-线程安全"><a href="#1-2-线程安全" class="headerlink" title="1.2 线程安全"></a>1.2 线程安全</h2><p>本次作业我参考了课上上机的实现，也就是一个输入线程，一个分配线程和六个电梯线程。</p>
<ul>
<li>输入线程：负责获取输入并将相关请求存入总的请求队列里，相当于生产者的作用</li>
<li>分配线程从总请求队列里取请求并通过请求指定的电梯号分配给相应的电梯请求队列</li>
<li>电梯线程根据调度策略从电梯请求对列里获取请求并进行相关动作</li>
</ul>
<p>从设计思想上来看，我的设计中相关的共享资源是总请求队列（输入线程和分配线程），电梯的请求队列（分配线程和电梯线程），也就是说，针对线程安全问题只需要在这两个队列进行原子性设计即可。<br>我本次作业采用synchronized关键字来实现锁，并主要采用对方法加锁的方式来实现原子性设计。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Allrequest</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;PersonRequest&gt; allrequests = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isEnd</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>针对Allrequest类，对其涉及到设置结束标志和读取结束标志、对请求队列做读写操作的方法全部加上synchronized修饰，保证每次最多一个线程能对该类做操作。例如：  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> PersonRequest <span class="title function_">getNextRequest</span><span class="params">()</span> {</span><br><span class="line">    <span class="keyword">if</span> (allrequests.isEmpty() &amp;&amp; !isEnd) {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            wait();</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (allrequests.isEmpty()) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">    notifyAll();</span><br><span class="line">    <span class="keyword">return</span> allrequests.remove(<span class="number">0</span>);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElevatorRequest</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;PersonRequest&gt; personRequests = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isEnd</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>针对ElevatorRequest类，与Allrequest类完全相同，保证每次最多一个线程对该类的队列及结束标志做操作。  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> PersonRequest <span class="title function_">getPersonRequest</span><span class="params">(<span class="type">int</span> cfl, <span class="type">int</span> load, <span class="type">int</span> status, <span class="type">int</span> edr, <span class="type">int</span> realdr)</span> {</span><br><span class="line">    <span class="keyword">if</span> (!isEmpty()) {</span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> score;</span><br><span class="line">        <span class="keyword">for</span> (PersonRequest pr : personRequests) {</span><br><span class="line">            score = Calculate.score(pr, load, cfl, edr, realdr);</span><br><span class="line">            <span class="keyword">if</span> (score &gt; max) {</span><br><span class="line">                max = score;</span><br><span class="line">                index = personRequests.indexOf(pr);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (status != <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span> (max &lt;= <span class="number">0.5</span>) {</span><br><span class="line">                notifyAll();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        notifyAll();</span><br><span class="line">        <span class="keyword">return</span> personRequests.remove(index);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>
<h2 id="1-3-UML类图"><a href="#1-3-UML类图" class="headerlink" title="1.3 UML类图"></a>1.3 UML类图</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw5uml.png"></p>
<p><strong>功能说明</strong>  </p>
<ul>
<li><code>MainClass</code>：程序入口，同时作为主线程</li>
<li><code>InputThread</code>：输入线程，负责将获取的请求放入总请求队列</li>
<li><code>DispatchThread</code>：分配线程，负责从总请求队列拿取请求并分配到相应的电梯请求队列</li>
<li><code>ElevatorThread</code>：电梯线程，主要负责电梯运行</li>
<li><code>Allrequest</code>：总请求队列，输入线程和分配线程访问</li>
<li><code>ElevatorRequest</code>：电梯请求队列，分配线程和电梯线程访问</li>
<li><code>Calculate</code>：计算类，负责转换楼层及计算请求分数</li>
</ul>
<h2 id="1-4-UML协作图"><a href="#1-4-UML协作图" class="headerlink" title="1.4 UML协作图"></a>1.4 UML协作图</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw5sequence.png"><br>第一次作业线程之间的协作关系较为简单，不同线程要访问同一资源时严格保持互斥，同步机制可以通过wait-notify实现。</p>
<h1 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h1><p>第二次作业在第一次作业的基础上，删去了乘客指定电梯，同时增加了临时调度这一请求。完成本次作业的过程十分痛苦，因为我想增加中央调度器并让中央调度器使用我的调度策略来进行调度，同时我还想把电梯从电梯线程里面分离出来，因此我决定进行重构，但是重构后出现了大量bug，历经两天的debug，最后仍然有一个及其难以复现的bug（开多个进程跑一个小时只复现出来一例，但课程评测机总能命中），且极为匪夷所思（电梯有时会抽风在接到请求后一直往上或往下走，不去接人，出现一大堆ARRIVE UNKNOWN，并导致RTLE），因此在清明假期的最后一天，我决定放弃该重构代码，直接在第一次作业上进行迭代，同时也将原来的中央调度器算法替换为极为简单的平均分配，导致在性能上有很大的损失。</p>
<h2 id="2-1-调度设计"><a href="#2-1-调度设计" class="headerlink" title="2.1 调度设计"></a>2.1 调度设计</h2><p>对于迭代后的代码，没什么好说的，整体思想和第一次作业几乎没有差别，别看好像多了个中央调度器采用平均分配进行调度，但其完成的事情就是第一次作业中分配线程完成的，和第一次作业乘客指定电梯几乎没有差别，而单部电梯仍然采用我设计的调度算法，唯一变化的就是电梯在开始临时调度后，会将自己接送队列里的请求转移到自己的请求队列。  </p>
<p>对于我的重构代码，我将设计的调度策略从单部电梯移到了中央调度器上，也即中央调度器根据我的算法来分配请求给电梯，每次得到一个能够分配且分数最高的请求并分配给相应电梯，电梯抛弃了自己的请求队列，只保留接送队列，电梯便不再需要去考虑调度的事情了，电梯开始临时调度后，将接送队列里的所有请求返回给总请求队列，这些请求将被中央调度器再次分配。这其中遇到的一个问题是我的算法中有距离和方向这两个要素，但中央调度器开始计算时，六部电梯可能有的停在楼层，有的在运行，如果不仔细设计，很可能会得到错误的距离和方向，导致电梯接到理应不该接的人，我解决该问题的办法是当电梯开始移动的那一刻就立马更新楼层等信息，而不是在到了之后再更新，这样便可保证正确性。  </p>
<p>依稀记得重构代码在中测最后一个点跑出了13秒的好成绩，甚至比某些同学影子电梯的实现更快，改成迭代后的代码后变成了22秒，直接慢了十秒，在性能上损失巨大。</p>
<h2 id="2-2-线程安全"><a href="#2-2-线程安全" class="headerlink" title="2.2 线程安全"></a>2.2 线程安全</h2><p>我第二次作业仍然采用synchronized关键字修饰来实现锁，一方面是时间问题担心换成其他锁会造成难以预料的问题，另一方面是我认为我的代码用synchronized足以，换成其他锁之后性能并不会得到太大的提升。本次作业中，我仍然主要采用对方法加锁的方式，整个方法为同步块，除非方法里面有wait，否则在执行完整个方法之后才释放锁，但编写过程中还遇到了一些其他问题，于是又增加了其他机制确保线程安全（见下）。</p>
<p>迭代后的代码和第一次作业在线程安全上的实现大差不差，因为是平均分配，并不会涉及到其他的什么共享资源或互斥变量，同时临时调度开始后，我会让电梯将其接送队列里的请求放入它自己的请求队列，因此也不会对线程安全造成什么影响。  </p>
<p>对于我的重构代码，虽然有错误，但我认为那个错误并不是由线程安全导致的，因此也简单聊聊。<br>我仍然设置了三类线程，输入线程，中央调度线程，电梯线程，其中电梯与电梯线程分离。由于电梯会选择将请求放回总请求队列，因此直观上来看三类线程都需要访问总请求队列，但是这便会产生问题，因为我的电梯线程只想拥有电梯这一个内部属性，也就是说其他属性会放在电梯类里，那申请放回的时候，电梯线程首先占有电梯的锁，随后会尝试占有总请求队列的锁，但这时总请求队列的所可能被中央调度线程占有，且它此刻正在分配，因此也会尝试占有电梯的锁，这便造成了死锁。为了解决这个问题，我新增了一个队列来存储从电梯返回的请求，并在中央调度器中将这一队列的请求添加到总请求队列。  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Allperequ</span> <span class="variable">allrequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Allperequ</span>();</span><br><span class="line"><span class="type">Allperequ</span> <span class="variable">againrequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Allperequ</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elevator</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Allperequ againrequest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addRequest</span><span class="params">()</span> {</span><br><span class="line">      <span class="comment">//假设要放回请求</span></span><br><span class="line">      againrequest.add(Request);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DispatchThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Allperequ allperequest;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Allperequ againperequest;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            <span class="keyword">synchronized</span>(againrequest){</span><br><span class="line">                <span class="keyword">if</span> (!againperequest.isEmpty()) {</span><br><span class="line">                    allperequest.addAll(againperequest);</span><br><span class="line">                    againperequest.clear();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//调度分配</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>除了死锁的问题之外，我的设计还存在轮询的问题，这也是由于线程通信没做好导致的，具体来说，我的中央调度器在获取下一个可以分配的请求时，有可能请求队列并不为空，但由于电梯的状态导致返回的请求是null，这时便会一直重复while循环直到返回不为null。这个问题也让我十分头疼，因为比较难改，我需要考虑到底在什么时候进行下一次计算，需要考虑如何通知中央调度器进行下一次计算。最后我采用的方法是新增一个锁，如果返回为null，则获取这个锁并进入等待状态，直到电梯完成相关操作后唤醒。  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plock</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getLock</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> lock;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">nfa</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) {</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Allperequ</span> {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;PersonInfo&gt; allperequests = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> PersonInfo <span class="title function_">getNextRequest</span><span class="params">()</span>{</span><br><span class="line">        <span class="comment">//获取请求设为maxrequest</span></span><br><span class="line">        <span class="keyword">while</span> (maxrequest == <span class="literal">null</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">synchronized</span> (Plock.getLock()) {</span><br><span class="line">                    Plock.getLock().wait();</span><br><span class="line">                }</span><br><span class="line">                maxrequest = maxRequest(elevators);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elevator</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span> {</span><br><span class="line">        <span class="comment">//相关操作</span></span><br><span class="line">        Plock.nfa();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>这样便成功处理了轮询问题。  </p>
<h2 id="2-3-UML类图"><a href="#2-3-UML类图" class="headerlink" title="2.3 UML类图"></a>2.3 UML类图</h2><p><strong>迭代</strong>  </p>
<p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw6uml.png"><br><strong>功能说明</strong>  </p>
<ul>
<li><code>MainClass</code>：程序入口，也是主线程</li>
<li><code>InputThread</code>：输入线程，将获取的请求按类别放入总正常请求队列或总临时调度请求队列</li>
<li><code>DispatchprThread</code>：分配正常请求线程，将总正常请求队列里的请求分配给不同电梯，放入对应的电梯请求队列（平均分配）</li>
<li><code>DispatchschThread</code>：分配临时调度线程，将总临时调度请求队列里的请求分配给对应电梯，放入对应的电梯请求队列</li>
<li><code>ElevatorThread</code>：电梯线程，负责电梯运行</li>
<li><code>Allperequest</code>：总正常请求队列，输入线程和分配正常请求线程访问</li>
<li><code>Allschrequest</code>：总临时调度请求队列，输入线程和分配临时调度线程访问</li>
<li><code>ElevatorRequest</code>：电梯请求队列，电梯线程和两个分配线程访问</li>
<li><code>Calculate</code>：计算类</li>
<li><code>PersonInfo</code>：重写的<code>PersonRequest</code>类，方便修改起始楼层</li>
</ul>
<p><strong>重构</strong>  </p>
<p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw6backuml.png"><br><strong>功能说明</strong>  </p>
<ul>
<li><code>MainClass</code>：程序入口，也是主线程</li>
<li><code>InputThread</code>：输入线程，将获取的请求按类别放入总正常请求队列或总临时调度请求队列</li>
<li><code>DispatchprThread</code>：分配正常请求线程，将总正常请求队列里的请求分配给不同电梯，作为中央调度器，按调度策略调度</li>
<li><code>DispatchschThread</code>：分配临时调度线程，将总临时调度请求队列里的请求分配给对应电梯</li>
<li><code>ElevatorThread</code>：电梯线程，电梯在此运行</li>
<li><code>Allperequest</code>：总正常请求队列，输入线程和分配正常请求线程访问</li>
<li><code>Allschrequest</code>：总临时调度请求队列，输入线程和分配临时调度线程访问</li>
<li><code>Elevator</code>：电梯类，负责电梯运行，若有临时调度，会将自己接送队列的请求返回到总正常请求队列</li>
<li><code>Calculate</code>：计算类</li>
<li><code>PersonInfo</code>：重写的<code>PersonRequest</code>类，方便修改起始楼层</li>
</ul>
<h2 id="2-4-UML协作图"><a href="#2-4-UML协作图" class="headerlink" title="2.4 UML协作图"></a>2.4 UML协作图</h2><p>迭代和重构的代码在线程协作上类似，只在某些地方不同，仅用一张图展示。<br><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw6sequence.png"></p>
<h1 id="第三次作业"><a href="#第三次作业" class="headerlink" title="第三次作业"></a>第三次作业</h1><p>第三次作业在第二次作业的基础上增加了双轿厢设计，初看觉得很简单，动手时才发现左右为难。本次作业在第二次作业（迭代版）上进行迭代，同样省去了中央调度器的大部分工作。本次作业耗费将近一天半的时间进行调试和debug，过程仍然艰辛。</p>
<h2 id="3-1-调度设计"><a href="#3-1-调度设计" class="headerlink" title="3.1 调度设计"></a>3.1 调度设计</h2><p>同第二次作业，仍然采用平均分配，同时在开始临时调度或双轿厢改造时将接送队列里的请求返回到电梯请求队列。值得一提的是，因为双轿厢的设计，一部电梯很可能会收到其无法接到的请求，这时需要将这类请求全部输送给同一电梯井里的另一部电梯，因此本次作业中，我直接让所有电梯线程和分配线程同时共用<code>RequestMap</code>，其是一个<code>HashMap</code>，键为电梯id，值为电梯请求队列。</p>
<h2 id="3-2-双轿厢设计"><a href="#3-2-双轿厢设计" class="headerlink" title="3.2 双轿厢设计"></a>3.2 双轿厢设计</h2><p>本次作业的难点无疑是双轿厢的设计，主要难点在于如何确保双轿厢改造同步开始、如何确保电梯运行安全（不碰撞），这其实是在考验我们如何实现不同线程之间的通信。<br>针对同步开始改造，我新增了一个<code>Elevatorready</code>类，里面存放着一个ready队列，为0表示还没准备好改造，为1表示准备好了  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elevatorready</span> {</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; readyElevators;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>这样一个电梯准备好开始改造后，首先将自己的ready标志置1，然后访问对应的另一部电梯的ready标志，直到另一部电梯的ready标志也为1时，开始进行改造。由于只需输出一次UPDATE BEGIN和UPDATE END，我将输出这个操作交给双轿厢改造中的A电梯来执行。<br>针对运行安全，我也新增了一个<code>Objoccupy</code>类，存放各部电梯对于分界楼层的占用情况。  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Objoccupy</span> {</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; occupyList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">occupy</span><span class="params">(<span class="type">int</span> eid, <span class="type">int</span> broid)</span> {</span><br><span class="line">        notifyAll();</span><br><span class="line">        <span class="keyword">while</span> (occupyList.get(broid - <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        occupyList.set(eid - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> eid)</span> {</span><br><span class="line">        notifyAll();</span><br><span class="line">        occupyList.set(eid - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">waitleave</span><span class="params">(<span class="type">int</span> eid)</span> {</span><br><span class="line">        <span class="keyword">while</span> (occupyList.get(eid - <span class="number">1</span>) == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                wait();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>  

<p>这样在电梯想要移动到分隔楼层时，会先检查楼层是否被占，直到不再被占才移动。  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElevatorThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ableTomove</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (shaftdouble == <span class="number">1</span>) {</span><br><span class="line">            <span class="keyword">if</span> ((pos == <span class="number">1</span> &amp;&amp; floor == divifloor + <span class="number">1</span> &amp;&amp; direction == -<span class="number">1</span>) ||</span><br><span class="line">                    (pos == -<span class="number">1</span> &amp;&amp; floor == divifloor - <span class="number">1</span> &amp;&amp; direction == <span class="number">1</span>)) {</span><br><span class="line">                occupy.waitleave(broid);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">if</span> (shaftdouble == <span class="number">1</span> &amp;&amp; floor == divifloor) {</span><br><span class="line">            occupy.occupy(id, broid);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//move</span></span><br><span class="line">        <span class="keyword">if</span> (shaftdouble == <span class="number">1</span> &amp;&amp; floor != divifloor) {</span><br><span class="line">            occupy.release(id);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//modify status</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<p>这样便可保证电梯不会相撞，但我的设计是要保证一个电梯到达了分隔楼层上一层或下一层之后，另一部电梯才能移动到分隔楼层，这样在时间上会有一定损失，但也可以避免通过sleep的方式去调整两部电梯的输出顺序。  </p>
<p>除了上述两个问题之外，我认为双轿厢还有一个较为困难的地方，我也是在这个地方修改了多次，出现RTLE的原因全部在此，那就是如何结束。显然不能像前两次作业一样只考虑单部电梯，还得考虑同一电梯井的另一部电梯，如果两部电梯都达到了结束的状态，才能结束。但我在实现的过程中发现总会出现非双轿厢电梯无法结束，或者双轿厢电梯中一部电梯提前结束，而另一部电梯还有要接送的乘客且要使这些乘客到达目的地，但凭其自己是做不到的，因此总会发生程序无法结束的情况。<br>检查了很久，针对第一个问题，最后发现是我分配线程的设置出了问题，我针对每一种请求设置了一个分配线程，那么结束时，要通过三个线程对电梯请求队列设置三个结束标志，只有三个标志都设置好了电梯请求对列才认为自己结束，而这是极其不安全的。很可能当前电梯检查状态时发现还有一个标着没有设置，接着跳转到正常执行的代码块中等待其他线程对电梯请求队列做操作，而就在跳转的这一过程中最后一个标志也被设置了，最后就导致该电梯僵死在那里，无法结束。我将分配线程改为一个，同时电梯请求队列的结束标志也改为一个之后，便解决了该问题。（这个问题在第二次作业中也有，只不过第二次作业只有两个结束标志，没那么容易触发，也让我苟活过了强测和互测）<br>针对第二个问题，我发现是我在分配线程中为电梯请求队列设置结束标志时，没有同时获取这六个请求队列的锁导致的，如果能获取这六把锁便可解决该问题，因此这一操作的相关代码中，出现了一个金字塔结构。  </p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (allrequest.isEmpty() &amp;&amp; allrequest.isEnd()) {</span><br><span class="line">    <span class="type">ElevatorRequest</span> <span class="variable">el1</span> <span class="operator">=</span> requestMap.get(<span class="number">1</span>);</span><br><span class="line">    <span class="type">ElevatorRequest</span> <span class="variable">el2</span> <span class="operator">=</span> requestMap.get(<span class="number">2</span>);</span><br><span class="line">    <span class="type">ElevatorRequest</span> <span class="variable">el3</span> <span class="operator">=</span> requestMap.get(<span class="number">3</span>);</span><br><span class="line">    <span class="type">ElevatorRequest</span> <span class="variable">el4</span> <span class="operator">=</span> requestMap.get(<span class="number">4</span>);</span><br><span class="line">    <span class="type">ElevatorRequest</span> <span class="variable">el5</span> <span class="operator">=</span> requestMap.get(<span class="number">5</span>);</span><br><span class="line">    <span class="type">ElevatorRequest</span> <span class="variable">el6</span> <span class="operator">=</span> requestMap.get(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (el1) {</span><br><span class="line">        <span class="keyword">synchronized</span> (el2) {</span><br><span class="line">            <span class="keyword">synchronized</span> (el3) {</span><br><span class="line">                <span class="keyword">synchronized</span> (el4) {</span><br><span class="line">                    <span class="keyword">synchronized</span> (el5) {</span><br><span class="line">                        <span class="keyword">synchronized</span> (el6) {</span><br><span class="line">                            <span class="keyword">for</span> (ElevatorRequest request : requestMap.values()) {</span><br><span class="line">                                request.setEnd();</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-线程安全"><a href="#3-3-线程安全" class="headerlink" title="3.3 线程安全"></a>3.3 线程安全</h2><p>本次作业还是采用synchronized关键字修饰，总的实现和第二次作业基本相同，增加了对<code>Elevatorready</code>和<code>Objoccupy</code>的原子性实现。</p>
<h2 id="3-4-UML类图"><a href="#3-4-UML类图" class="headerlink" title="3.4 UML类图"></a>3.4 UML类图</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw7uml.png"><br>可见电梯线程类包含了大量属性和方法，全是因为我没有设置策略类等来进行更好的层次化设计导致的。  </p>
<p><strong>功能说明</strong>  </p>
<ul>
<li><code>MainClass</code>：程序入口，同时作为主线程</li>
<li><code>InputThread</code>：输入线程，负责将获取的请求放入总请求队列</li>
<li><code>DispatchThread</code>：分配线程，负责从总请求队列拿取请求并分配到相应的电梯请求队列</li>
<li><code>ElevatorThread</code>：电梯线程，主要负责电梯运行</li>
<li><code>Allrequest</code>：总请求队列，输入线程和分配线程访问</li>
<li><code>ElevatorRequest</code>：电梯请求队列，分配线程和电梯线程访问</li>
<li><code>Calculate</code>：计算类，负责转换楼层及计算请求分数</li>
<li><code>PersonInfo</code>：重写<code>PersonRequest</code>类</li>
<li><code>Elevatorready</code>：电梯就绪队列，用于保证双轿厢改造同时开始</li>
<li><code>Objoccupy</code>：分隔楼层占用队列，用于保证电梯运行安全</li>
<li><code>ElevatorStatus</code>：电梯状态队列，用于电梯结束</li>
</ul>
<h2 id="3-5-UML协作图"><a href="#3-5-UML协作图" class="headerlink" title="3.5 UML协作图"></a>3.5 UML协作图</h2><p><img lazyload="" src="/images/loading.svg" data-src="/img/oo/unit2/hw7sequence.png">  </p>
<h1 id="迭代总结"><a href="#迭代总结" class="headerlink" title="迭代总结"></a>迭代总结</h1><h2 id="稳定内容"><a href="#稳定内容" class="headerlink" title="稳定内容"></a>稳定内容</h2><p>我认为本单元三次作业中较为稳定的内容如下：</p>
<ol>
<li>电梯调度策略</li>
<li>电梯基本行为逻辑</li>
<li>线程功能</li>
<li>锁的选择</li>
</ol>
<h2 id="易变内容"><a href="#易变内容" class="headerlink" title="易变内容"></a>易变内容</h2><p>我认为本单元三次作业中较为易变的内容如下：</p>
<ol>
<li>电梯特殊行为逻辑</li>
<li>分配新增请求</li>
<li>实现新增请求</li>
<li>线程安全的实现</li>
<li>程序结束的实现</li>
</ol>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>这三次作业我强测和互测都未出现bug，全依赖于完成作业时不断的debug。<br>本单元我主要通过利用IDEA工具、搭建评测机来debug。<br>利用IDEA工具主要是针对死锁，可以更快地找到死锁出现的原因并加以修改。<br>除了死锁之外的错误我主要通过评测机来检查。我搭建了一个小型的评测机（data，checker，test），支持对一个输入，多个程序进行评测，设有自动评测、评测指定输入和只检查输出对于输入是否正确三种模式。<br>由于中测我很少出现WA的错误，大多是CTLE和RTLE，因此在中测通过前我很少使用自动评测（因为要编写checker），针对CTLE，我一般是直接在程序中添加输出语句来查看轮询情况（一定得及时终止程序，听到风扇声响起直接掐，否则重定向后可能会得到一个巨大无比的文件），然后进行修改。针对RTLE，我一般通过添加输出，开多个进程跑同一程序，也可以直接使用评测机的第二种模式，将同一个程序以不同命名放在评测目录下（因为只关心RTLE，不关心其他错误，所以不需要checker的功能）评测，最后查看相应输出。在中测通过后，我便可以加上checker来自动评测检查其他错误。<br>编写数据生成比较轻松，但想编写出较强的数据也有难度。我最开始编写的数据生成由于随机机制的原因会导致大量数据出现在最大时间戳，后来修改了随机机制后使得整体生成的数据较为均匀。在hw7中，我进一步增强了数据生成，使其能够在某几个时间戳里生成大量请求。<br>编写checker较为繁琐，因为错误情况较多，hw5中，我自己编写了checker，能够定位错误类别和出错的输出，hw6中，借助同学编写的checker接入我的评测机，hw7中，在上一版checker基础上进行迭代。成功编写checker后，还需通过评测机来检验checker是否正确，并进行修改。总的来说，整个过程较为繁琐。<br>正是通过评测机，我才能尽可能使自己的错误减少，最后成功通过强测与互测。在互测中，我也借助评测机检查出其他同学的错误。</p>
<h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><h2 id="层次化设计"><a href="#层次化设计" class="headerlink" title="层次化设计"></a>层次化设计</h2><p>本单元其实我在这一方面做得并不太好，从UML图就可以看出。由于我整体借鉴的是本单元第一次上机的实现，导致我并没有去设计策略类等，电梯线程类里有一大堆东西，其实现在看来，可以把电梯线程类里面的许多东西提取出来成为策略类。虽然层次化设计没有实现得很好，但我对每个模块的功能仍然清晰，这也是我迭代过程中并没有出现太多结构上的改动而使迭代变得困难的原因，反而是第二次作业的重构花了我很长时间（周二写到周六）最后还没有正确地实现 <del>第二次作业的迭代版只用了清明最后一天的上午两个小时就完成了，而且一遍过中测</del>。但是无论怎样，有一个更好的设计还是会让代码阅读起来更加清晰优雅的。</p>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>其实本单元感触最深的就是这个方面了。写到这里，我还是会像开头一样认为多线程编程是及其不安全的，但我觉得这个安全不是由于其机制，其机制是安全的，而是由于人的实现。一个小小的考虑不周很可能就会造成死锁、通信间的问题，后果也会十分可怕，况且相关错误由于多线程的执行难以复现，查起来也会十分痛苦。经历了三次作业的磨练后，我也总结了一些自己关于线程安全的设计：</p>
<ul>
<li>尽量避免在一个上了锁的方法或代码块里去尝试获取另一个对象或类的锁，这样很可能会出现死锁问题。</li>
<li>明确共享资源和临界区，及时上锁和释放，记得唤醒</li>
<li>多模拟几个线程同时在某一时间节点开始运行的情况，这样能检查出很多因为线程通信不合适而造成的问题</li>
</ul>
<p>在本单元的作业中，我常常使用上面的方法和思想检查出了很多错误。我不敢说我现在再去编写一个多线程程序一定能使其完全安全，但我认为如果不时提醒自己有关上面的设计，我应该能尽可能使其安全。</p>
]]></content>
      <categories>
        <category>面向对象(BUAA)</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>linux中的vim编辑器</title>
    <url>/2025/03/09/linux/vim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<h1 id="vim编辑器的使用"><a href="#vim编辑器的使用" class="headerlink" title="vim编辑器的使用"></a>vim编辑器的使用</h1><ul>
<li>命令模式</li>
<li>输入模式</li>
<li>底线命令模式</li>
</ul>
<h2 id="命令模式下的快捷键"><a href="#命令模式下的快捷键" class="headerlink" title="命令模式下的快捷键"></a>命令模式下的快捷键</h2><ul>
<li>i 在当前光标位置进入输入模式</li>
<li>a 在当前光标之后进入输入模式</li>
<li>I 在当前行开头进入输入模式</li>
<li>A 在当前行结尾进入输入模式</li>
<li>o 在当前光标下一行进入输入模式</li>
<li>O 在当前光标上一行进入输入模式</li>
<li>0 移动光标到当前行的开头</li>
<li>$ 移动光标到当前行的结尾</li>
<li>&#x2F; 搜索模式</li>
<li><ul>
<li>n 向下继续搜索</li>
</ul>
</li>
<li><ul>
<li>N 向上继续搜索</li>
</ul>
</li>
<li>dd 删除光标所在行内容</li>
<li>ndd 删除当前光标向下n行</li>
<li>yy 复制当前行</li>
<li>nyy 复制当前行和下面n行</li>
<li>p 粘贴复制内容</li>
<li>u 撤销修改</li>
<li><code>ctrl</code>+r 反向撤销修改</li>
<li>gg 跳到首行</li>
<li>G 跳到末行</li>
<li>dG 从当前行开始，向下全部删除</li>
<li>dgg 从当前行开始，向上全部删除</li>
<li>d$ 从当前光标开始，删除到本行结尾</li>
<li>d0 从当前光标开始，删除到本行开头</li>
</ul>
<h2 id="底线命令模式下命令"><a href="#底线命令模式下命令" class="headerlink" title="底线命令模式下命令"></a>底线命令模式下命令</h2><ul>
<li>q！ 强制退出</li>
<li>set nu 显示行号</li>
<li>set nonu 不显示行号</li>
<li>set paste 设置粘贴模式（从外部复制内容保持格式一致）</li>
</ul>
]]></content>
      <categories>
        <category>Linux操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA操作系统lab1</title>
    <url>/2025/03/25/OS/Lab1%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Lab1实验报告"><a href="#Lab1实验报告" class="headerlink" title="Lab1实验报告"></a>Lab1实验报告</h1><h2 id="一、思考题"><a href="#一、思考题" class="headerlink" title="一、思考题"></a>一、思考题</h2><h3 id="Thinking-1-1"><a href="#Thinking-1-1" class="headerlink" title="Thinking 1.1"></a>Thinking 1.1</h3><p><strong>尝试分别使用实验环境中的原生 x86 工具链（gcc、ld、readelf、objdump 等）和 MIPS交叉编译工具链（带有mips-linux-gnu- 前缀，如 mips-linux-gnu-gcc、mips-linux-gnu-ld），重复其中的编译和解析过程，观察相应的结果，并解释其中向objdump传入的参数的含义</strong><br>objdump是一个强大的二进制文件分析工具，常用于反汇编和查看目标文件的详细信息，常用的参数有以下几个：  </p>
<ul>
<li>-d：反汇编可执行段  </li>
<li>-D：反汇编所有段</li>
<li>-S：在反汇编代码中混合显示源代码</li>
<li>-j：指定要反汇编的段</li>
<li>-g：显示调试信息</li>
<li>-f：显示文件头信息，包括文件类型、架构、字节序等</li>
</ul>
<p>在过程中，我使用最多的是-D和-S选项，用来将目标文件反汇编出来。<br>我在使用原生x86工具链和MIPS交叉编译工具链并观察相应结果时发现，它们最大的差异就是相应架构的不同，x86工具链适用于x86架构，而MIPS工具链适用于MIPS架构。<br>比如，我编写了一个简单的C程序，如下：</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用原生工具链gcc正常编译出可执行文件，即”gcc hello.c”后，通过file查看文件类型，结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/x86file.png"
                     
                ><br>可以发现其是一个64位的x86-64架构的ELF可执行文件，同时用readelf查看其信息，结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/x86elf.png"
                     
                ><br>再运用gcc的-c选项只编译不链接并使用objdump进行反汇编后，相应结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/x86dump.png"
                     
                ><br>可见其中的指令全是x86指令集架构中的指令。<br>再使用MIPS交叉编译工具链，用mips-linux-gnu-gcc编译出可执行文件，通过file查看文件类型，结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/mipsfile.png"
                     
                ><br>其是一个32位的mips架构的ELF可执行文件，使用readelf查看其信息，结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/mipself.png"
                     
                ><br>再只对其编译不链接并使用objdump进行反汇编，结果如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/mipsdump.png"
                     
                ><br>其指令全是mips指令集架构中的指令。  </p>
<h3 id="Thinking-1-2"><a href="#Thinking-1-2" class="headerlink" title="Thinking 1.2"></a>Thinking 1.2</h3><p><strong>也许你会发现我们编写的readelf程序是不能解析readelf 文件本身的，而我们刚才介绍的系统工具readelf 则可以解析，这是为什么呢？</strong><br>首先查看Makefile：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/makefile.png"
                     
                ><br>可以发现，制作readelf和hello的语句选项并不相同，制作hello时多了”-m32”、”-static”、”-g”三个选项，指定了目标文件是32位架构，且其为静态链接。再分别查看hello和readelf的文件头：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/helloelf.png"
                     
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab1/elfelf.png"
                     
                ><br>可以发现hello确实是32位架构，而readelf是64位架构，而我们整个实验是在mips32位架构下进行的，所以我们自己写的readelf可以解析hello而不能解析自己  </p>
<h3 id="Thinking-1-3"><a href="#Thinking-1-3" class="headerlink" title="Thinking 1.3"></a>Thinking 1.3</h3><p><strong>在理论课上我们了解到，MIPS体系结构上电时，启动入口地址为0xBFC00000（其实启动入口地址是根据具体型号而定的，由硬件逻辑确定，也有可能不是这个地址，但一定是一个确定的地址），但实验操作系统的内核入口并没有放在上电启动地址，而是按照内存布局图放置。思考为什么这样放置内核还能保证内核入口被正确跳转到？</strong><br>我们的整个实验是在QEMU模拟器上运行的，在运行第一行代码之前，我们已经拥有了一个正常的程序运行环境，已经可以访问内存了，我们还设置好了相应节的位置和程序入口，因此可以直接通过访问内存来正确跳转到内核入口。  </p>
<h2 id="二、难点分析"><a href="#二、难点分析" class="headerlink" title="二、难点分析"></a>二、难点分析</h2><p>个人觉得本次实验由于有很多理论上较为晦涩的东西，因此在啃实验指导书的时候十分痛苦，但真正到跳板机上做实验的时候很多东西并没有用到，相应的难度降低了不少，但还是有一些困难的，个人总结下来有如下：  </p>
<ul>
<li>ELF相关数据结构的定义的认识与理解</li>
<li>如何用指针去访问节和段</li>
<li>链接的逻辑</li>
<li>print的实现逻辑</li>
<li>MIPS内存如何布局</li>
</ul>
<h2 id="三、实验体会"><a href="#三、实验体会" class="headerlink" title="三、实验体会"></a>三、实验体会</h2><p>在Lab1中，我学习了操作系统是如何启动的，其启动过程是一个十分纠结的过程，好在实验所用qemu模拟器省去了那纠结的过程，我还了解到ELF格式的相关定义，以及内存的布局，链接器的工作原理等，这些东西对一向对底层硬件和软件不怎么感冒的我来说理解起来有一定的难度，就算完成了实验之后仍然觉得这些过程、原理和结构异常复杂，因为所完成的实验几乎没有怎么涉及到这些过程。最具挑战性的是最后对printf函数功能的实现，这个部分也花费了我很多时间，一来是相关注释的提示太模糊，二是我最初的想法和注释的想法大相径庭，实现的角度很不一样，导致我在耗费了大量时间去揣测注释的意思，最后又因为语法等原因进行了一定时间的debug，但在看到输出和期望输出相同的那一瞬间，我还是发自内心的开心，并理解到其实现逻辑的合理性。</p>
]]></content>
      <categories>
        <category>OS(BUAA)</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA操作系统lab0</title>
    <url>/2025/03/12/OS/Lab0%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Lab0实验报告"><a href="#Lab0实验报告" class="headerlink" title="Lab0实验报告"></a>Lab0实验报告</h1><h2 id="一、思考题"><a href="#一、思考题" class="headerlink" title="一、思考题"></a>一、思考题</h2><h3 id="Thinking-0-1"><a href="#Thinking-0-1" class="headerlink" title="Thinking 0.1"></a>Thinking 0.1</h3><p><strong>执行命令cat Modified.txt，观察其结果和第一次执行 add 命令之前的 status 是否一样，并思考原因</strong><br>这两次的结果是不一样的。第一次将<code>git status</code>命令结果重定向至<code>Untracked.txt</code>文件中时，这时的<code>README.txt</code>文件还未被放入暂存区，所以状态是未被追踪，而第二次进行类似操作时，<code>README.txt</code>文件已被放入暂存区，所以状态应该是已修改。</p>
<h3 id="Thinking-0-2"><a href="#Thinking-0-2" class="headerlink" title="Thinking 0.2"></a>Thinking 0.2</h3><p><strong>仔细看看0.10，思考一下箭头中的add thefile、stage thefile和commit分别对应的是Git里的哪些命令呢</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab0/pic10.png"
                     
                >  </p>
<ol>
<li><strong>Untracked-&gt;Staged</strong>：<code>git add</code>  </li>
<li><strong>Modified-&gt;Staged</strong>：<code>git add</code>  </li>
<li><strong>Staged-&gt;Modified</strong>：<code>git commit</code></li>
</ol>
<h3 id="Thinking-0-3"><a href="#Thinking-0-3" class="headerlink" title="Thinking 0.3"></a>Thinking 0.3</h3><p><strong>代码文件print.c被错误删除时，应当使用什么命令将其恢复</strong><br><code>git checkout -- print.c </code><br><strong>代码文件print.c被错误删除后，执行了gitrmprint.c命令，此时应当使用什么命令将其恢复</strong><br><code>git reset HEAD print.c</code><br><code>git checkout -- print.c</code><br><strong>无关文件hello.txt已经被添加到暂存区时，如何在不删除此文件的前提下将其移出暂存区？</strong><br><code>git rm --cached hello.txt</code>  </p>
<h3 id="Thinking-0-4"><a href="#Thinking-0-4" class="headerlink" title="Thinking 0.4"></a>Thinking 0.4</h3><p><strong>reset命令作用</strong><br>在循着Thinking中给出的步骤练习后，可以发现reset命令的作用就是让我们回退或恢复版本的，可以通过<code>git reset --hard HEAD~(num)</code>来进行版本回退，也可以直接用版本的哈希值（通过<code>git log</code>查询）来指定移动到哪个版本。</p>
<h3 id="Thinking-0-5"><a href="#Thinking-0-5" class="headerlink" title="Thinking 0.5"></a>Thinking 0.5</h3><p><strong>执行如下命令, 并查看结果</strong><br><strong>· echo first</strong><br>result:first(stdout)<br><strong>· echo second &gt; output.txt</strong><br>result:second(output.txt)<br><strong>• echo third &gt; output.txt</strong><br>result:third(otuput.txt)<br><strong>• echo forth &gt;&gt; output.txt</strong><br>result:<br>third<br>forth(output.txt)</p>
<h3 id="Thinking-0-6"><a href="#Thinking-0-6" class="headerlink" title="Thinking 0.6"></a>Thinking 0.6</h3><p><strong>使用你知道的方法（包括重定向）创建下图内容的文件（文件命名为test），将创建该文件的命令序列保存在command文件中，并将test文件作为批处理文件运行，将运行结果输出至result文件中。给出command文件和result文件的内容，并对最后的结果进行解释说明（可以从test文件的内容入手）. 具体实现的过程中思考下列问题: echo<br> echo Shell Start 与 echo <code>echo Shell Start</code> 效果是否有区别; echo echo $c&gt;file1与echo <code>echo $c&gt;file1</code> 效果是否有区别</strong><br>command文件内容如图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab0/command.png"
                     
                ><br>result文件内容如图所示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab0/result.png"
                     
                ><br><strong>解释</strong><br>根据test文件内容，不难发现执行test文件其实就是为变量<code>a</code>，<code>b</code>，<code>c</code>赋值后再把它们的值存到不同的文件中，之后再根据顺序把相应值依次添加到file4文件中，最后输出到result文件中，因此result文件最终结果为”3 2 1”</p>
<h2 id="二、难点分析"><a href="#二、难点分析" class="headerlink" title="二、难点分析"></a>二、难点分析</h2><p>个人认为本次实验的难点还是在于接触新的东西时各方面的不熟悉导致的，具体来说有如下：  </p>
<ul>
<li>git的使用，对工作区、暂存区、分支、状态、版本的体会  </li>
<li>linux相关指令的使用，对指令和选项功能的体会（尤其是多功能指令例如sed、awk等命令）  </li>
<li>shell脚本的编写，对语法的把握和认识</li>
</ul>
<h2 id="三、实验体会"><a href="#三、实验体会" class="headerlink" title="三、实验体会"></a>三、实验体会</h2><p>lab0的实验难度并不算大，主要是让我们熟悉实验环境，回顾之前的知识，了解操作系统基本的概念和原理，并了解linux的基本使用。本人之前并未太多使用linux系统，只能使用一些基本的指令，对于编写脚本，编译代码等并不熟悉，在做完本次实验后，我才终于理解为什么都说程序员要想提高自己的效率一定要会使用linux，当使用多了linux系统后，也会真正体会到cli的魅力，可能它没有gui那么简单，那么直观，但是通过输入指令来控制电脑让我们进一步能体会到人与机器的交互。</p>
]]></content>
      <categories>
        <category>OS(BUAA)</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA操作系统lab3</title>
    <url>/2025/04/19/OS/Lab3%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Lab3实验报告"><a href="#Lab3实验报告" class="headerlink" title="Lab3实验报告"></a>Lab3实验报告</h1><h2 id="一、思考题"><a href="#一、思考题" class="headerlink" title="一、思考题"></a>一、思考题</h2><h3 id="Thinking-3-1"><a href="#Thinking-3-1" class="headerlink" title="Thinking 3.1"></a>Thinking 3.1</h3><p><strong>请结合MOS中的页目录自映射应用解释代码中e-&gt;env_pgdir[PDX(UVPT)] &#x3D; PADDR(e-&gt;env_pgdir) | PTE_V 的含义</strong><br>从虚拟地址UVPT开始往上到ULIM之间是进程自己的页表，因此在二级页表映射机制当中，页目录中也应该含有自己本身的相关映射，由虚拟地址可知其在页目录中的第[PDX(UVPT)]项中，因此做代码中的赋值，本质上是让进程可以真正访问自己的页目录和页表。</p>
<h3 id="Thinking-3-2"><a href="#Thinking-3-2" class="headerlink" title="Thinking 3.2"></a>Thinking 3.2</h3><p><strong>elf_load_seg 以函数指针的形式，接受外部自定义的回调函数 map_page。请你找到与之相关的data这一参数在此处的来源，并思考它的作用。没有这个参数可不可以？为什么？</strong><br>该参数是由elf_load_seg传递给map_page的，data的作用是传递进程控制块以及其内部的属性，让相关的插入等操作得以实现。该参数使用void*的方式定义，能够很大程度上提升其复用性，较为方便。没有这个参数是不可以的，这样回调函数的需求得不到满足。</p>
<h3 id="Thinking-3-3"><a href="#Thinking-3-3" class="headerlink" title="Thinking 3.3"></a>Thinking 3.3</h3><p><strong>结合 elf_load_seg 的参数和实现，考虑该函数需要处理哪些页面加载的情况</strong><br>如果段头地址未对齐，首先加载其数据在内存中起始位置bin所处的那一页。之后会加载所有数据内容。如果该段在文件中的大小小于其在内存中的大小，则一直分配和加载页面到该段在文件中大小不小于其在内存中大小为止。</p>
<h3 id="Thinking-3-4"><a href="#Thinking-3-4" class="headerlink" title="Thinking 3.4"></a>Thinking 3.4</h3><p><strong>你认为这里的env_tf.cp0_epc存储的是物理地址还是虚拟地址?</strong><br>结合mips汇编的异常中断处理及Lab2内容容易知道，env_tf.cp0_epc存储的应该是虚拟地址。</p>
<h3 id="Thinking-3-5"><a href="#Thinking-3-5" class="headerlink" title="Thinking 3.5"></a>Thinking 3.5</h3><p><strong>试找出0、1、2、3号异常处理函数的具体实现位置</strong><br>它们的实现位置在kern&#x2F;genex.S</p>
<h3 id="Thinking-3-6"><a href="#Thinking-3-6" class="headerlink" title="Thinking 3.6"></a>Thinking 3.6</h3><p><strong>阅读entry.S、genex.S和env_asm.S这几个文件，并尝试说出时钟中断在哪些时候开启，在哪些时候关闭</strong><br>发生时钟中断的时候，首先跳到异常分发程序，检测发生了那种异常，针对时钟中断，应该检测出0号异常，通过handle_int函数处理，handle_int函数根据Cause寄存器的值判断是否是Timer对应的7号中断位引发的时钟中断，如果是，则执行中断服务函数timer_irq，跳转到schedule中执行</p>
<h3 id="Thinking-3-7"><a href="#Thinking-3-7" class="headerlink" title="Thinking 3.7"></a>Thinking 3.7</h3><p><strong>阅读相关代码，思考操作系统是怎么根据时钟中断切换进程的。</strong><br>由schedule函数的实现逻辑可以看出，每次产生时间中断，操作系统都会将相应进程的时间片长度减1，当一个进程时间片长度为0时，便切换当前进程到调度队列的首个进程，并通过env_run方法运行它。</p>
<h2 id="二、难点分析"><a href="#二、难点分析" class="headerlink" title="二、难点分析"></a>二、难点分析</h2><p>由于在上一次实验中渐渐熟悉了对链表宏的使用以及相关地址的转换，所以本次实验的难度较上次没有那么大，但我认为仍有以下一些难点：  </p>
<ul>
<li>对用户空间和内核空间的认识</li>
<li>对每一个进程的地址空间的认识</li>
<li>对回调函数的实现和作用的理解</li>
<li>对异常与中断和进程之间的联系的理解</li>
</ul>
<h2 id="三、实验体会"><a href="#三、实验体会" class="headerlink" title="三、实验体会"></a>三、实验体会</h2><p>在Lab3中，我学会了操作系统是怎么去创建进程、管理进程、运行进程、切换进程的。由于在Lab2中有大量的链表宏的使用，因此逐渐对其熟悉，所以这次在Lab3中再次遇到大量使用链表宏的情况下，我不再像Lab2那样手足无措了，因此本次作业写得也会比上一次轻松不少。但完成实验代码是一方面，理解Lab3的内容又是另一方面。我认为相较于Lab2的内容来说，本次的内容的理解难度完全不比上一次低，其实细究会发现上一次是有关操作系统管理内存的内容，这次是管理进程的内容，但其实这次有很多的实现还是和内存脱不了关系的，整个操作系统似乎都是围绕着内存来进行的，因此对内存管理有一个得当的理解和认识是很重要的。</p>
]]></content>
      <categories>
        <category>OS(BUAA)</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA操作系统lab2</title>
    <url>/2025/04/07/OS/Lab2%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Lab2实验报告"><a href="#Lab2实验报告" class="headerlink" title="Lab2实验报告"></a>Lab2实验报告</h1><h2 id="一、思考题"><a href="#一、思考题" class="headerlink" title="一、思考题"></a>一、思考题</h2><h3 id="Thinking-2-1"><a href="#Thinking-2-1" class="headerlink" title="Thinking 2.1"></a>Thinking 2.1</h3><p><strong>在编写的 C 程序中，指针变量中存储的地址被视为虚拟地址，还是物理地址？MIPS 汇编程序中 lw和sw 指令使用的地址被视为虚拟地址，还是物理地址？</strong><br>在编写的C程序中，指针变量存储的地址为虚拟地址，MIPS汇编中lw和sw使用的地址也是虚拟地址</p>
<h3 id="Thinking-2-2"><a href="#Thinking-2-2" class="headerlink" title="Thinking 2.2"></a>Thinking 2.2</h3><p><strong>1)从可重用性的角度，阐述用宏来实现链表的好处。</strong><br>在实验中定义的有关链表的宏是一些十分常用的对于链表的操作，而在实验中多次使用到定义的链表结构，因此相应的链表操作也是十分频繁的，通过宏来实现链表，可以让进行相关操作时不必在编写代码实现逻辑，直接使用宏即可，这省去了不必要的代码，同时提高了代码的可读性<br><strong>2)查看实验环境中的&#x2F;usr&#x2F;include&#x2F;sys&#x2F;queue.h，了解其中单向链表与循环链表的实现，比较它们与本实验中使用的双向链表，分析三者在插入与删除操作上的性能差异</strong><br>在这个文件中，有单向链表、双向链表和循环链表的定义，其中双向链表的定义与我们实验中使用的双向链表类似，我们可以看不同类型链表链表项的定义：<br>单向链表：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/singly_list.png"
                     
                ><br>双向链表：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/list.png"
                     
                ><br>循环链表：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/singly_tail.png"
                     
                ><br>实现上，单向链表和循环链表类似，都有指向下一个元素的指针，其中循环链表最后一个元素相应指针指向第一个元素，同时其维护了一个指向尾项的指针，而双向链表不仅有指向下一个元素的指针，还有一个指向前一个元素的指向下一个元素的指针的指针。<br>操作性能：</p>
<ul>
<li>单向链表：在某一项前插入，需要遍历链表，在某一项后插入，可以直接插入，删除也需要遍历链表  </li>
<li>循环链表：在某一项前插入，需要遍历链表，在某一项后插入，可以直接插入，同时可以直接在尾部插入，删除需要遍历链表  </li>
<li>双向链表：插入可以直接插入，但在尾部插入需要遍历链表，删除也可以直接删除</li>
</ul>
<h3 id="Thinking-2-3"><a href="#Thinking-2-3" class="headerlink" title="Thinking 2.3"></a>Thinking 2.3</h3><p><strong>选择Page_list正确的展开结构</strong><br>阅读代码可以知道Page_list其实包含的就是一个指向Page的指针，而Page的定义如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/page.png"
                     
                ><br>即一个链表项，一个被引用次数，所以相应的Page_list的结构应该是选项C所展示：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/page_list.png"
                     
                ></p>
<h3 id="Thinking-2-4"><a href="#Thinking-2-4" class="headerlink" title="Thinking 2.4"></a>Thinking 2.4</h3><p><strong>1)从虚拟内存和多进程操作系统的实现角度，阐述ASID的必要性</strong><br>操作系统为每一个进程维护一个独立的虚拟地址空间，并维护相应的页表，所以很可能同一虚拟地址在不同进程中映射到不同的物理地址，如果没有ASID，那操作系统无法知道当前虚拟地址是在哪个地址空间，也就无法给出正确的映射，导致无法正确访问相应的物理内存<br><strong>2)说明 4Kc 中可容纳不同的地址空间的最大数量</strong><br>官方文档描述如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/asid.png"
                     
                ><br>ASID占8位，所以4Kc中最多可容纳256个不同的地址空间</p>
<h3 id="Thinking-2-5"><a href="#Thinking-2-5" class="headerlink" title="Thinking 2.5"></a>Thinking 2.5</h3><p><strong>1)tlb_invalidate和tlb_out的调用关系</strong><br>tlb_invalidate调用tlb_out<br><strong>2)请用一句话概括tlb_invalidate的作用</strong><br>删除特定虚拟地址在TLB中的旧表项<br><strong>3)逐行解释tlb_out中的汇编代码</strong>  </p>
<pre><code class="language-MIPS">LEAF(tlb_out)
.set noreorder
        mfc0    t0, CP0_ENTRYHI
        mtc0    a0, CP0_ENTRYHI
        nop
        /* Step 1: Use &#39;tlbp&#39; to probe TLB entry */
        /* Exercise 2.8: Your code here. (1/2) */
        tlbp
        nop
        /* Step 2: Fetch the probe result from CP0.Index */
        mfc0    t1, CP0_INDEX
.set reorder
        bltz    t1, NO_SUCH_ENTRY
.set noreorder
        mtc0    zero, CP0_ENTRYHI
        mtc0    zero, CP0_ENTRYLO0
        mtc0    zero, CP0_ENTRYLO1
        nop
        /* Step 3: Use &#39;tlbwi&#39; to write CP0.EntryHi/Lo into TLB at CP0.Index  */
        /* Exercise 2.8: Your code here. (2/2) */
        tlbwi
.set reorder
</code></pre>
<p>tlb_out汇编代码如上，首先将ENTRYHI寄存器的值放入t0寄存器，同时将a0寄存器里面保存的参数即KEY存入ENTRYHI，再通过 tlbp 指令寻找TLB中对应的旧表项，将表项的索引放入t1寄存器，如果索引大于等于0，向ENTRYHI、ENTRYLO0、ENTRYLO1寄存器中写入0，并使用tlbwi指令将这三个寄存器的值写入相应索引的表项</p>
<h3 id="Thinking-2-6"><a href="#Thinking-2-6" class="headerlink" title="Thinking 2.6"></a>Thinking 2.6</h3><p><strong>请结合 Lab2 开始的 CPU 访存流程与下图中的 Lab2 用户函数部分，尝试将函数调用与CPU访存流程对应起来，思考函数调用与CPU访存流程的关系</strong><br>CPU访存流程：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/cpu.png"
                     
                ><br>函数调用：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab2/function.png"
                     
                ><br>函数调用需要将参数压入栈，这个操作需要对内存进行写，由于地址是虚拟地址，于是触发CPU访存。执行函数体时，CPU会跳转到函数入口地址，逐条开始执行指令，这时若遇到局部变量或者访存指令，又需要进行CPU的访存流程</p>
<h3 id="Thinking-2-7"><a href="#Thinking-2-7" class="headerlink" title="Thinking 2.7"></a>Thinking 2.7</h3><p><strong>简单了解并叙述X86体系结构中的内存管理机制，比较X86和MIPS在内存管理上的区别</strong><br>X86体系结构的内存管理是通过分段和分页协同工作实现的。<br>其主要思想是将内存划分为逻辑段，每个段通过段描述符定义其基址、长度和权限，当有逻辑地址时，首先将通过分段将逻辑地址转化为线性地址，针对线性地址，采用分页机制，进一步将线性地址映射到物理地址，这和MIPS体系结构相似，而分页和分段既是协同的，又是独立的，两个机制共同实现了X86体系的内存管理。<br>在分页机制上，两种体系的实现也不同，MIPS体系结构是通过软件来管理页表和TLB的，而X86体系结构完全是通过硬件来管理二者的。</p>
<h2 id="二、难点分析"><a href="#二、难点分析" class="headerlink" title="二、难点分析"></a>二、难点分析</h2><ul>
<li>Exercise 2.1:对相关宏定义的查找与了解</li>
<li>Exercise 2.2:对双向链表的理解，尤其是对其中le_prev这个指针的理解，思考如何实现双向链表的插入、删除等操作，清楚要修改哪些值</li>
<li>Exercise 2.3 - Exercise 2.5：对页结构体和页表结构体的理解，理解相应的地址变换操作，清楚该由什么地址变换到什么地址，同时熟悉链表相应宏的使用</li>
<li>Exercise 2.6 - Exercise 2.7：对二级页表机制的理解，清楚相应的地址变换，熟练链表宏的使用  </li>
<li>Exercise 2.8 - Exercise 2.10：对TLB的组成及替换机制的理解</li>
</ul>
<h2 id="三、实验体会"><a href="#三、实验体会" class="headerlink" title="三、实验体会"></a>三、实验体会</h2><p>在Lab2中，我学会了操作系统是如何去管理内存的，包括怎么实现分页机制，怎么实现TLB机制，以及如何将逻辑地址转换到物理地址。说实话，我认为本单元的难度较大，机制本身并不难以理解，甚至如果在纸面上，应该是较为简单的，但是到要真正用软件去实现这些机制的时候，我才意识到这件事到底有多么的复杂，其中有数不清的结构体的定义，有数不清的宏定义，有难以理解的链表实现，有分不清楚的指针……最关键的是，一个文件里要用到的函数、宏定义等很可能来自其他文件，一方面，可能根本不知道有哪些函数和宏可以使用，另一方面，想用某个函数和宏的时候，如果突然不太记得其功能，可这时又不知道其定义在哪个文件。总的来说，完成本单元的代码对我来说是极具挑战性的，但是最终看到测试通过的时候我也有一种成就感，为自己付出的时间感到值得。</p>
]]></content>
      <categories>
        <category>OS(BUAA)</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA操作系统lab4</title>
    <url>/2025/05/06/OS/Lab4%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Lab4实验报告"><a href="#Lab4实验报告" class="headerlink" title="Lab4实验报告"></a>Lab4实验报告</h1><h2 id="一、思考题"><a href="#一、思考题" class="headerlink" title="一、思考题"></a>一、思考题</h2><h3 id="Thinking-4-1"><a href="#Thinking-4-1" class="headerlink" title="Thinking 4.1"></a>Thinking 4.1</h3><p><strong>内核在保存现场的时候是如何避免破坏通用寄存器的</strong><br>内存在保护现场的时候，通过将自身的局部变量、返回地址、调用函数的参数等压入栈中这样来保存此时通用寄存器中的值，放置在后续操作中这些值丢失，在返回时，再将这些值弹出栈并赋给相应的寄存器。<br><strong>系统陷入内核调用后可以直接从当时的$a0-$a3参数寄存器中得到用户调用msyscall留下的信息吗</strong><br>不可以，因为这四个寄存器在系统陷入内核态后可能会进行其他的操作而导致里面的值被破坏，直接访问是不安全的，应该从栈帧中来读取相关参数。<br><strong>我们是怎么做到让sys开头的函数“认为”我们提供了和用户调用msyscall时同样的参数的</strong><br>在用户态调用msyscall时，前四个参数会被存入$a0-$a3寄存器，同时在栈帧底部保留16字节的空间，后两个参数被存入在预留空间之上的8字节空间内，内核态中显式地从保存的用户上下文中获取这些参数值，这样就可以让sys开头的函数认为我们提供了和用户调用msyscall时同样的参数。<br><strong>内核处理系统调用的过程对Trapframe做了哪些更改？这种修改对应的用户态的变化是什么</strong><br>将EPC值加4以保证系统调用完成后返回到正确地址，同时将返回值存入2号寄存器。用户态会正确执行下一条指令。</p>
<h3 id="Thinking-4-2"><a href="#Thinking-4-2" class="headerlink" title="Thinking 4.2"></a>Thinking 4.2</h3><p><strong>为什么 envid2env中需要判断 e-&gt;env_id !&#x3D; envid的情况？如果没有这步判断会发生什么情况</strong><br>不同envid的后十位可能相同（二进制），所以如果不加上该判断，可能会取到错误的进程。</p>
<h3 id="Thinking-4-3"><a href="#Thinking-4-3" class="headerlink" title="Thinking 4.3"></a>Thinking 4.3</h3><p><strong>请回顾 kern&#x2F;env.c 文件中 mkenvid()函数的实现，该函数不会返回 0，请结合系统调用和 IPC 部分的实现与envid2env()函数的行为进行解释</strong><br>首先，若mkenvid()函数会返回0，那么就会有进程的id为0，但在envid2env()的实现中，如果envid为0，则查询到的进程将会是目前的进程，这和我们的预期不符，同时也让进程间的通信发生错误，因此mkenvid()函数不会返回0。同时由于curenv是内核态的变量，用户态不能获取其id，这样实现方便用户进程将当前进程的envid传给内核。</p>
<h3 id="Thinking-4-4"><a href="#Thinking-4-4" class="headerlink" title="Thinking 4.4"></a>Thinking 4.4</h3><p><strong>关于 fork 函数的两个返回值，下面说法正确的是：<br>A、fork 在父进程中被调用两次，产生两个返回值<br>B、fork 在两个进程中分别被调用一次，产生两个不同的返回值<br>C、fork 只在父进程中被调用了一次，在两个进程中各产生一个返回值<br>D、fork 只在子进程中被调用了一次，在两个进程中各产生一个返回值</strong><br>正确的是C</p>
<h3 id="Thinking-4-5"><a href="#Thinking-4-5" class="headerlink" title="Thinking 4.5"></a>Thinking 4.5</h3><p><strong>我们并不应该对所有的用户空间页都使用duppage进行映射。那么究竟哪<br>些用户空间页应该映射，哪些不应该呢？请结合kern&#x2F;env.c中env_init函数进行的页<br>面映射、include&#x2F;mmu.h里的内存布局图以及本章的后续描述进行思考</strong><br>从0到USTACKTOP的用户空间页应该映射，USTACKTOP到UTOP之间的内容是拿来处理页写入异常的，因此不需要与子进程共享，UTOP之上的内容是所有进程共享的，也不需要做父子进程之间单独的共享。</p>
<h3 id="Thinking-4-6"><a href="#Thinking-4-6" class="headerlink" title="Thinking 4.6"></a>Thinking 4.6</h3><p><strong>vpt和vpd的作用是什么？怎样使用它们</strong><br>vpt和vpd相当于两个数组，一个是页表项的数组，一个是页目录项的数组，只需通过页表项和页目录项的下标就可通过这两个宏来访问相应的页表项或页目录项。<br><strong>从实现的角度谈一下为什么进程能够通过这种方式来存取自身的页表</strong><br>页表和页目录是存放在用户空间中的，且逻辑上是连续的，因此进程可以通过这种方式来存取自身页表。<br><strong>它们是如何体现自映射设计的</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/os/lab3/ziyingshe.png"
                     
                ><br>如图，可以发现页目录是处于页表中的，同时在页表中的位置相当于页表在整个内存中的位置，这体现了自映射设计。<br><strong>进程能够通过这种方式来修改自己的页表项吗</strong><br>不能，虽然该区域处于用户空间，但是对用户态只读不写，要修改必须陷入内核态。  </p>
<h3 id="Thinking-4-7"><a href="#Thinking-4-7" class="headerlink" title="Thinking 4.7"></a>Thinking 4.7</h3><p><strong>在 do_tlb_mod 函数中，你可能注意到了一个向异常处理栈复制 Trapframe<br>运行现场的过程，请思考并回答这几个问题：<br>这里实现了一个支持类似于“异常重入”的机制，而在什么时候会出现这种“异常重入”</strong><br>出现写时复制异常时。<br><strong>内核为什么需要将异常的现场 Trapframe复制到用户空间？</strong><br>因为最终需要恢复到用户态后跳转到用户异常处理函数，由用户程序完成写时复制等自定义处理，这时用户异常处理函数需要相应的现场。  </p>
<h3 id="Thinking-4-8"><a href="#Thinking-4-8" class="headerlink" title="Thinking 4.8"></a>Thinking 4.8</h3><p><strong>在用户态处理页写入异常，相比于在内核态处理有什么优势</strong>  </p>
<ul>
<li>缓解内核压力</li>
<li>使得其更安全，防止更改不必要的页面</li>
<li>使其更加灵活，能够完成很多自定义的处理</li>
<li>降低异常处理错误而导致的影响</li>
</ul>
<h3 id="Thinking-4-9"><a href="#Thinking-4-9" class="headerlink" title="Thinking 4.9"></a>Thinking 4.9</h3><p><strong>为什么需要将 syscall_set_tlb_mod_entry的调用放置在 syscall_exofork之前</strong><br>因为子进程需要修改env指针的值，这涉及到对写时复制页面的写入，因此会触发写时复制异常，而该异常需要调用syscall_set_tlb_mod_entry才能正确触发。<br><strong>如果放置在写时复制保护机制完成之后会有怎样的效果</strong><br>这样将会不能正确处理异常。  </p>
<h2 id="二、难点分析"><a href="#二、难点分析" class="headerlink" title="二、难点分析"></a>二、难点分析</h2><p>本次实验的代码量进一步增加，且内容也很多，从异常处理到fork的实现，中间有很多需要停下来仔细思考理解的点，我认为主要有以下：</p>
<ul>
<li>对系统调用流程的理解</li>
<li>对何时在内核态何时在用户态的辨析</li>
<li>对Trapframe结构体的理解</li>
<li>对写时复制机制的理解与实现</li>
<li>对页写入异常处理流程的理解</li>
<li>对进程的共享空间的理解</li>
<li>对进程通信之间的实现</li>
</ul>
<h2 id="三、心得体会"><a href="#三、心得体会" class="headerlink" title="三、心得体会"></a>三、心得体会</h2><p>在Lab4中，我学会了如何实现系统调用机制，并以此来实现进程创建函数fork()。整体来说，我认为本次实验还是较难的，前后关系很紧密，又引入了大量的宏以及函数，如何去使用或者实现它们是一大难点，同时由于实验代码的完成还涉及到对整个内存空间的认识，很多时候很容易分不清楚内核空间和用户空间，因此完成起来还是较为困难的。但是完成了实验之后，我对系统调用和进程创建的理解确实加深了不少，虽说仍然有一些地方存在些许疑惑，理解起来不是那么容易，担仍然感受到了操作系统设计的巧妙，同时也对整个内存空间的认识更深入。一句话总结起来就是困难但丰富。</p>
]]></content>
      <categories>
        <category>OS(BUAA)</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>BUAA操作系统lab5</title>
    <url>/2025/05/20/OS/Lab5%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
    <content><![CDATA[<h1 id="Lab5实验报告"><a href="#Lab5实验报告" class="headerlink" title="Lab5实验报告"></a>Lab5实验报告</h1><h2 id="一、思考题"><a href="#一、思考题" class="headerlink" title="一、思考题"></a>一、思考题</h2><h3 id="Thinking-5-1"><a href="#Thinking-5-1" class="headerlink" title="Thinking 5.1"></a>Thinking 5.1</h3><blockquote>
<p>如果通过 kseg0 读写设备，那么对于设备的写入会缓存到 Cache 中。这是一种错误的行为，在实际编写代码的时候这么做会引发不可预知的问题。请思考：这么做这会引发什么问题？对于不同种类的设备（如我们提到的串口设备和IDE磁盘）的操作会有差异吗？可以从缓存的性质和缓存更新的策略来考虑。  </p>
</blockquote>
<p>答：如果设备的数据缓存到Cache之后发生了更改或是触发了中断，Cache里的数据可能来不及进行修改，导致从Cache中获取的数据可能是过时的，发生错误。<br>对于串口设备来说，其发生的读写操作更为频繁，信号量也众多，因此发生错误的概率会更高。</p>
<h3 id="Thinking-5-2"><a href="#Thinking-5-2" class="headerlink" title="Thinking 5.2"></a>Thinking 5.2</h3><blockquote>
<p>查找代码中的相关定义，试回答一个磁盘块中最多能存储多少个文件控制块？一个目录下最多能有多少个文件？我们的文件系统支持的单个文件最大为多大？  </p>
</blockquote>
<p>答：如图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="D:/hexo_program/source/img/os/lab5/file_struct_size.png"
                     
                ><br>可知一个文件控制块的大小是256字节，而一个磁盘块为4KB，所以一个磁盘块最多能存储16个文件控制块。<br>一个目录最多有1024个目录项，每个目录项对应一个磁盘块，所以一个目录下最多能有16384个文件。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="D:/hexo_program/source/img/os/lab5/fcb.png"
                     
                ><br>由该图可以知道，文件系统支持的单个文件最大为1024*4KB&#x3D;4MB。</p>
<h3 id="Thinking-5-3"><a href="#Thinking-5-3" class="headerlink" title="Thinking 5.3"></a>Thinking 5.3</h3><blockquote>
<p>请思考，在满足磁盘块缓存的设计的前提下，我们实验使用的内核支持的最大磁盘大小是多少？  </p>
</blockquote>
<p>DISKMAX&#x3D;0x40000000，所以在满足磁盘块缓存设计的前提下，内核支持的最大磁盘大小为1GB。</p>
<h3 id="Thinking-5-4"><a href="#Thinking-5-4" class="headerlink" title="Thinking 5.4"></a>Thinking 5.4</h3><blockquote>
<p> 在本实验中，fs&#x2F;serv.h、user&#x2F;include&#x2F;fs.h 等文件中出现了许多宏定义，试列举你认为较为重要的宏定义，同时进行解释，并描述其主要应用之处  </p>
</blockquote>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NDIRECT 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NINDIRECT (BLOCK_SIZE / 4)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXFILESIZE (NINDIRECT * BLOCK_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE2BLK (BLOCK_SIZE / sizeof(struct File))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SECT2BLK (BLOCK_SIZE / SECT_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISKMAP 0x10000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISKMAX 0x40000000</span></span><br><span class="line">```  </span><br><span class="line">我认为比较重要的宏有以上：  </span><br><span class="line"></span><br><span class="line">* NDIRECT：文件控制块中文件的直接指针个数</span><br><span class="line">* NINDIRECT：文件控制块中文件的间接指针个数</span><br><span class="line">* MAXFILESIZE：文件最大大小</span><br><span class="line">* FILE2BLK：将文件转化为磁盘块</span><br><span class="line">* SECT2BLK：将扇区转化为磁盘块</span><br><span class="line">* DISKMAP：块缓存起始地址</span><br><span class="line">* DISKMAX：最大块缓存大小</span><br><span class="line">### Thinking <span class="number">5.5</span></span><br><span class="line">&gt; 在Lab4“系统调用与fork”的实验中我们实现了极为重要的fork函数。那么fork前后的父子进程是否会共享文件描述符和定位指针呢？请在完成上述练习的基础上编写一个程序进行验证。  </span><br><span class="line"></span><br><span class="line">我编写了下面一个简易程序：  </span><br><span class="line">```c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *msg = <span class="string">&quot;This is the NEW message of the day!\n&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *diff_msg = <span class="string">&quot;This is a different message of the day!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> r;</span><br><span class="line">        <span class="type">int</span> fdnum;</span><br><span class="line">        <span class="type">char</span> buf[<span class="number">512</span>];</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">if</span> ((id = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((r = open(<span class="string">&quot;/newmotd&quot;</span>, O_RDWR)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        user_panic(<span class="string">&quot;child cannot open /newmotd: %d&quot;</span>, r);</span><br><span class="line">                &#125;</span><br><span class="line">                fdnum = r;</span><br><span class="line">                debugf(<span class="string">&quot;child_open is good and the fdnum is %d\n&quot;</span>,fdnum);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((r = open(<span class="string">&quot;/newmotd&quot;</span>, O_RDWR)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        user_panic(<span class="string">&quot;parent cannot open /newmotd: %d&quot;</span>, r);</span><br><span class="line">                &#125;</span><br><span class="line">                fdnum = r;</span><br><span class="line">                debugf(<span class="string">&quot;parent_open is good and the fdnum is %d\n&quot;</span>,fdnum);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">输出如下：  </span><br><span class="line">```SHELL</span><br><span class="line">parent_open is good and the fdnum is <span class="number">0</span></span><br><span class="line">child_open is good and the fdnum is <span class="number">0</span></span><br><span class="line">```  </span><br><span class="line">所以父子进程是会共享文件描述符和定位指针的。</span><br><span class="line">### Thinking <span class="number">5.6</span></span><br><span class="line">&gt; 请解释 File, Fd, Filefd 结构体及其各个域的作用。比如各个结构体会在哪些过程中被使用，是否对应磁盘上的物理实体还是单纯的内存数据等。说明形式自定，要求简洁明了，可大致勾勒出文件系统数据结构与物理实体的对应关系与设计框架。  </span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> &#123;</span></span><br><span class="line">	<span class="type">char</span> f_name[MAXNAMELEN];<span class="comment">//文件名</span></span><br><span class="line">	<span class="type">uint32_t</span> f_size; <span class="comment">//文件大小</span></span><br><span class="line">	<span class="type">uint32_t</span> f_type; <span class="comment">//文件类型</span></span><br><span class="line">	<span class="type">uint32_t</span> f_direct[NDIRECT];<span class="comment">//文件直接指针</span></span><br><span class="line">	<span class="type">uint32_t</span> f_indirect;<span class="comment">//间接磁盘块</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">File</span> *<span class="title">f_dir</span>;</span><span class="comment">//文件所属目录</span></span><br><span class="line">	<span class="type">char</span> f_pad[FILE_STRUCT_SIZE-MAXNAMELEN-(<span class="number">3</span> + NDIRECT)* <span class="number">4</span>-<span class="keyword">sizeof</span>(<span class="type">void</span> *)];<span class="comment">//填充空余空间</span></span><br><span class="line">&#125;__attribute__((aligned(<span class="number">4</span>),packed));</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fd</span>&#123;</span></span><br><span class="line">	u_int fd_dev_id;<span class="comment">//设备id</span></span><br><span class="line">	u_int fd_offset;<span class="comment">//读写偏移量</span></span><br><span class="line">	u_int fd_omode;<span class="comment">//打开方式</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span>&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Fd</span> <span class="title">f_fd</span>;</span><span class="comment">//文件描述符，同上</span></span><br><span class="line">	u_int f_fileid;<span class="comment">//文件id</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">f_file</span>;</span><span class="comment">//文件控制块</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h3 id="Thinking-5-7"><a href="#Thinking-5-7" class="headerlink" title="Thinking 5.7"></a>Thinking 5.7</h3><blockquote>
<p> 图 5.9 中有多种不同形式的箭头，请解释这些不同箭头的差别，并思考我们的操作系统是如何实现对应类型的进程间通信的。  </p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="D:/hexo_program/source/img/os/lab5/sequence.png"
                     
                ><br>根据UML时序图相关知识可知，图中有同步和异步两种箭头。<br>ENV_CREATE()是异步操作，init()发出消息后继续执行不必阻塞，之后fs和user开始初始化。再之后fs进入serv函数，同时在未接收到user发来的请求信息时，由ipc_receive()将自身状态修改为ENV_NOT_RUNNABLE进行阻塞，等到user发送信息后fs再开始进行服务，与此同时user进程被阻塞，fs服务完成后将相应信息发送给user，然后等待下一个请求，user执行之后的操作。</p>
<h2 id="二、难点分析"><a href="#二、难点分析" class="headerlink" title="二、难点分析"></a>二、难点分析</h2><p>本次实验是实现文件系统，文件系统本身就是操作系统里面一个重要的部分，实现文件系统才能方便操作系统的管理。文件系统与IO有很强的关联，所以完成本次实验需要对IO和文件系统都有较深的理解，而这两部分的内容都是庞大的，所以本次实验难度较大。具体分析，我认为有以下难点：  </p>
<ul>
<li>对外设与操作系统连接的认识与理解</li>
<li>对文件系统整体实现的理解</li>
<li>对外设驱动的认识</li>
<li>对磁盘结构以及如何读写的认识</li>
<li>对微内核实现文件系统的认识</li>
<li>对磁盘块缓存的认识</li>
<li>对文件系统下如何查找文件的认识</li>
<li>对文件描述符的理解</li>
<li>对文件系统服务整体流程的理解</li>
</ul>
<h3 id="三、心得体会"><a href="#三、心得体会" class="headerlink" title="三、心得体会"></a>三、心得体会</h3><p>在lab5中，我跟着指导书以及实验代码的提示跌跌撞撞完成了本次实验，本次实验代码的难度并不大，按照提示来编写几乎遇不到什么坎，最可能出现的是一些小问题，所以细心编写还是花不了太多时间就能完成代码的。但本次的内容同样也十分庞杂，与理论课上讲的IO以及文件系统不同，指导书从操作系统具体是怎么从代码上去实现整个文件系统的入手，这会变得更加具象，比理论课上的一些知识更加难以理解。因此需要花费较多时间去细啃指导书，但通过仔细阅读指导书，同时对照着跳板机上的代码实现，我的确感受到了文件系统设计的精妙。</p>
]]></content>
      <categories>
        <category>OS(BUAA)</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理P5</title>
    <url>/2025/02/09/%E8%AE%A1%E7%BB%84/%E8%AE%A1%E7%BB%84P5/</url>
    <content><![CDATA[<h1 id="流水线CPU设计文档"><a href="#流水线CPU设计文档" class="headerlink" title="流水线CPU设计文档"></a>流水线CPU设计文档</h1><p>本次课下要求我们使用<code>verilog</code>来搭建一个支持十条指令的流水线CPU。可以说难度与复杂度较之前几次都上升了不少，但理清思路将CPU运行步骤印在心里后，会发现复杂度也没那么大。</p>
<h2 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h2><p>流水线CPU的搭建是在单周期CPU之上的，所以其实其整个数据通路和单周期的CPU没有太大的区别，唯一不同的就是单周期一条指令只需一个周期，而我们搭建的流水线CPU需要5个周期，这也要求我们将数据进行流水，每一级在每个周期将相应数据传到下一级。</p>
<h3 id="数据通路"><a href="#数据通路" class="headerlink" title="数据通路"></a>数据通路</h3><p>在此首先附上单周期的<code>logisim</code>图与流水线的数据通路图。</p>
<ul>
<li>单周期CPU<code>logisim</code>设计图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p5/single_cpu.png"
                      alt="单周期CPUlogisim设计图"
                ></li>
<li>流水线数据通路图：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p5/%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png"
                     
                ></li>
</ul>
<p>可以看到，若暂时不考虑冒险问题，流水线的数据通路和单周期的数据通路几乎一致，其只是将单周期的数据通路分为五个部级:F、D、E、M、W，相关部级所要做的工作根据名字一目了然。而在每个部级之间，我们加上一个流水寄存器用于传递和保存所要用的数据。什么数据需要传呢？这就要看我们下一级的需求了。但是可以知道的是，<code>pc</code>和相应的<code>instructioncode</code>是必须要一直流水下去的，其他按照需求流水即可，例如在E级还需要将ALU产生的结果等流水下去。</p>
<h3 id="冒险"><a href="#冒险" class="headerlink" title="冒险"></a>冒险</h3><p>数据通路看起来是比较简单的，使用<code>verilog</code>搭建起来可能会有一定的复杂度，但我们整体的思路还算清晰。接下来扰乱我们思绪的就应该是关于冒险的处理了。流水线CPU可能会存在结构冒险、控制冒险和数据冒险三种冒险问题，但由于我们的CPU的im和mem并不是一个存储器，因此结构冒险的问题对于我们来说是不存在的，因此主要考虑剩下两种。</br><br>而我认为最重要的冒险其实是数据冒险，也就是前面一条指令要写入的寄存器和当前指令要读取的寄存器一样时，这时我们读取的数据可能不是真正的数据。其之所以重要是因为几乎每一条指令都会产生这样的冒险，因此首先来考虑它。</p>
<h4 id="数据冒险"><a href="#数据冒险" class="headerlink" title="数据冒险"></a>数据冒险</h4><p>在这里，我采用的是教程里的A-T法来解决此问题。<br>A指的即是address，T指的即是time，在满足address和time的条件下，我们要做出相应操作来处理冒险。</p>
<ul>
<li>A条件：address相同</li>
<li>T条件</li>
<li><ul>
<li>Tuse:指令位于D级的时候，再经过多少个时钟周期就必须要使用相应的数据</li>
</ul>
</li>
<li><ul>
<li>Tnew:位于某个流水级的某个指令，它经过多少个时钟周期可以算出结果并且存储到流水级寄存器里</br>在满足Tuse &gt; Tnew 且 Tnew &#x3D; 0时，我们可以将相关数据进行转发，而当Tuse &lt; Tnew时，我们需要让指令在D级阻塞一周期。</li>
</ul>
</li>
</ul>
<p>基本思路便是如此，满足A-T的条件，我们就将相应数据进行转发，不满足我们就阻塞一周期。而相应的数据也不会太复杂，其实我们仔细思考可以发现，有写入功能的指令他们写入的数据无非就是三种，一种是jal，它会写入下一条指令的地址，一种是ALU计算型，他们回写入ALU的计算结果，一种是lw，会写入MEM的读取值，况且再结合上阻塞会发现，如果我们当前指令是与lw产生冒险，那一定会阻塞到lw流水到M级或W级，而那时便可将MEM读取值转发，因此我们注意将下一条指令的地址以及ALU的结果流水下去即可。</br>还有一点需要注意的是对于一些不用相关数据的指令例如jr，我们不应把他们的Tuse设为0，而是应该设为一个尽可能大的数，不然会产生无谓的阻塞，使得运行周期加长。</p>
<h4 id="控制冒险"><a href="#控制冒险" class="headerlink" title="控制冒险"></a>控制冒险</h4><p>控制冒险即是分支指令（如 beq ）的判断结果会影响接下来指令的执行的情况，例如beq需要判断rs和rt寄存器是否相等，而我们在单周期里是在ALU进行判断的，也就是说现在我们将在E级判断，但等判断结果出来后，F级已经又流水了两条指令了，而这时如果判断的结果是真，将会产生错误，为此，我们将beq的判断移至D级，但我们会发现F级仍会往下流水一条指令，所以这时加上延时槽便可解决这样的问题。</p>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>我们可以采用两种译码方式，一种是分布式译码，一种是集中式译码。集中式译码需要在某一级译码完成后将控制信号流水下去，这样流水的信号数量会很大，因此我采用的是分布式译码的方式，也就是在每一级对在该级的指令译码一次产生我所需要的控制信号即可，因此这样我会将控制器实例化4次。在控制器中除了单周期CPU里对应的控制信号以外，还需要加入转发的控制信号，我对Tuse和Tnew的计算也放进了控制器里。</p>
<h2 id="模块搭建"><a href="#模块搭建" class="headerlink" title="模块搭建"></a>模块搭建</h2><h3 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> IM(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">13</span>:<span class="number">2</span>] addr,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] out</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] im [<span class="number">0</span>:<span class="number">4095</span>];</span><br></pre></td></tr></table></figure></div>
<h3 id="FD-reg"><a href="#FD-reg" class="headerlink" title="FD_reg"></a>FD_reg</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> FD_reg(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">	 <span class="keyword">input</span> reset,</span><br><span class="line">	 <span class="keyword">input</span> fd_enable,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] f_pc,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] f_instr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] d_pc,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] d_instr</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="GRF"><a href="#GRF" class="headerlink" title="GRF"></a>GRF</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> GRF(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] a1,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] a2,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] a3,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] wd,</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> regwe,</span><br><span class="line">	 <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] rd1,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] rd2</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="STALL"><a href="#STALL" class="headerlink" title="STALL"></a>STALL</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> Stall(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] rs,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] rt,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] erd,</span><br><span class="line">	 <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] mrd,</span><br><span class="line">	 <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] wrd,</span><br><span class="line">	 <span class="keyword">input</span> e_regwe,</span><br><span class="line">	 <span class="keyword">input</span> m_regwe,</span><br><span class="line">	 <span class="keyword">input</span> w_regwe,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] rs_tuse,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] rt_tuse,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] e_tnew,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] m_tnew,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] w_tnew,</span><br><span class="line">	 <span class="keyword">output</span> pcstop,</span><br><span class="line">    <span class="keyword">output</span> stall</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="EXT"><a href="#EXT" class="headerlink" title="EXT"></a>EXT</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> EXT(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] opt,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">15</span>:<span class="number">0</span>] imm,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] outimm</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="DE-reg"><a href="#DE-reg" class="headerlink" title="DE_reg"></a>DE_reg</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> DE_reg(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">	 <span class="keyword">input</span> clr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] d_pc,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] d_instr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] d_rd1,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] d_rd2,</span><br><span class="line">	 <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] d_imm,</span><br><span class="line">	 <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] d_grfwr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] e_pc,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] e_instr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] e_rd1,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] e_rd2,</span><br><span class="line">	 <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] e_imm,</span><br><span class="line">	 <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] e_grfwr</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="FWD"><a href="#FWD" class="headerlink" title="FWD"></a>FWD</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> FWD(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] rs,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] rt,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] mrd,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] wrd,</span><br><span class="line">    <span class="keyword">input</span> mregwe,</span><br><span class="line">    <span class="keyword">input</span> wregwe,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] mtnew,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] wtnew,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] rs_slt,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] rt_slt</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> ALU(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] int_a,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] int_b,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] aluopt,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] out</span><br><span class="line">    );</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="EM-reg"><a href="#EM-reg" class="headerlink" title="EM_reg"></a>EM_reg</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> EM_reg(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] e_pc,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] e_instr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] e_grfwr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] e_alu,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] e_memwd,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] m_pc,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] m_instr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] m_grfwr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] m_alu,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] m_memwd</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="MEM"><a href="#MEM" class="headerlink" title="MEM"></a>MEM</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> MEM(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> memwe,</span><br><span class="line">    <span class="keyword">input</span> loadwe,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">13</span>:<span class="number">2</span>] addr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] wrdata,</span><br><span class="line">	 <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] pc,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] rddata</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="MW-reg"><a href="#MW-reg" class="headerlink" title="MW_reg"></a>MW_reg</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> MW_reg(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] m_pc,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] m_instr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">4</span>:<span class="number">0</span>] m_grfwr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] m_aludata,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] m_memdata,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] w_pc,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] w_instr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">4</span>:<span class="number">0</span>] w_grfwr,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] w_aludata,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] w_memdata</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h3 id="CONTROLLER"><a href="#CONTROLLER" class="headerlink" title="CONTROLLER"></a>CONTROLLER</h3><div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> CONTROLLER(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] phase,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] opt,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">5</span>:<span class="number">0</span>] func,</span><br><span class="line">    <span class="keyword">output</span> regwe,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] regdst,</span><br><span class="line">    <span class="keyword">output</span> aluslt,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">4</span>:<span class="number">0</span>] aluopt,</span><br><span class="line">    <span class="keyword">output</span> memwe,</span><br><span class="line">    <span class="keyword">output</span> loadwe,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] memreg,</span><br><span class="line">	 <span class="keyword">output</span> beq1,</span><br><span class="line">	 <span class="keyword">output</span> jal1,</span><br><span class="line">	 <span class="keyword">output</span> jr1,</span><br><span class="line">	 <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] D_rs_Tuse,</span><br><span class="line">	 <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] D_rt_Tuse,</span><br><span class="line">	 <span class="keyword">output</span> [<span class="number">1</span>:<span class="number">0</span>] Tnew</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><ol>
<li>基本指令测试（不含jal和jr）</li>
</ol>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x1011</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span>,$<span class="number">1</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">11</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">4</span>,$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">5</span>,$<span class="number">5</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">add </span>$<span class="number">11</span>,$<span class="number">11</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">11</span>,$<span class="number">0</span>,loop4</span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">7</span>,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">8</span>,$<span class="number">4</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">6</span>,$<span class="number">6</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">sw </span>$<span class="number">5</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="number">6</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">lw </span>$<span class="number">9</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">10</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">10</span>,loop1</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">9</span>,loop2</span><br><span class="line"><span class="symbol">loop1:</span><span class="keyword">sw </span>$<span class="number">10</span>,<span class="number">8</span>($<span class="number">2</span>)</span><br><span class="line"><span class="symbol">loop2:</span><span class="keyword">beq </span>$<span class="number">6</span>,$<span class="number">10</span>,loop3</span><br><span class="line"><span class="symbol">loop4:</span><span class="keyword">sw </span>$<span class="number">9</span>,<span class="number">12</span>($<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>跳转测试</li>
</ol>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x301c</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">1</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">31</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="symbol">loop:</span><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">3</span>,$<span class="number">2</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">2</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">4</span>,$<span class="number">3</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">jal </span>loop</span><br><span class="line"><span class="keyword">ori </span>$<span class="number">5</span>,$<span class="number">4</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">6</span>,$<span class="number">4</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。"><a href="#我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。" class="headerlink" title="我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。"></a>我们使用提前分支判断的方法尽早产生结果来减少因不确定而带来的开销，但实际上这种方法并非总能提高效率，请从流水线冒险的角度思考其原因并给出一个指令序列的例子。</h2><p>例如以下测试代码：</br></p>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x0011</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">1</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">2</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">1</span>,$<span class="number">2</span>,loop</span><br><span class="line"><span class="keyword">add </span>$<span class="number">3</span>,$<span class="number">1</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">4</span>,$<span class="number">1</span>,$<span class="number">2</span></span><br><span class="line"><span class="symbol">loop:</span><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">1</span>,$<span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<p>可以发现，因为lw的原因，beq在D级需要阻塞两个周期，所以其并非总能提高效率。</p>
<h2 id="因为延迟槽的存在，对于-jal-等需要将指令地址写入寄存器的指令，要写回-PC-8，请思考为什么这样设计"><a href="#因为延迟槽的存在，对于-jal-等需要将指令地址写入寄存器的指令，要写回-PC-8，请思考为什么这样设计" class="headerlink" title="因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计"></a>因为延迟槽的存在，对于 jal 等需要将指令地址写入寄存器的指令，要写回 PC + 8，请思考为什么这样设计</h2><p>由于延时槽指的是跳转指令发生时，无论如何会进行下一条指令，所以对于jal 等需要将指令地址写入寄存器的指令来说，真正的下一条指令应该是当前pc值+8</p>
<h2 id="我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如-DM-、-ALU-），请思考为什么？"><a href="#我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如-DM-、-ALU-），请思考为什么？" class="headerlink" title="我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如 DM 、 ALU ），请思考为什么？"></a>我们要求大家所有转发数据都来源于流水寄存器而不能是功能部件（如 DM 、 ALU ），请思考为什么？</h2><p>这样可能会造成数据冲突。例如在E级进行转发的时候，当前的rd1值需要转发alu的计算结果，但这样转发后alu又会进行运算，最后得不到一个稳定的值。</p>
<h2 id="我们为什么要使用-GPR-内部转发？该如何实现？"><a href="#我们为什么要使用-GPR-内部转发？该如何实现？" class="headerlink" title="我们为什么要使用 GPR 内部转发？该如何实现？"></a>我们为什么要使用 GPR 内部转发？该如何实现？</h2><p>因为在当指令传入W级后，真正要写入GRF的内部发生的时间应为下一个周期，而这时若不进行内部转发，在下一个周期就会损失掉这个要写入GRF的值，导致错误。</br>实现方法：<code>assign rd1 = (a1==a3&amp;&amp;regwe&amp;&amp;a1!=0)?wd:grf[a1];</code></p>
<h2 id="我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？"><a href="#我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？" class="headerlink" title="我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？"></a>我们转发时数据的需求者和供给者可能来源于哪些位置？共有哪些转发数据通路？</h2><p>主要的需求者为D级grf的两个读取数据，alu的两个计算数据以及mem的写入数据。可能来源于EM流水寄存器的alu输出，MW流水寄存器的写入数据，以及每个部级的pc值。</p>
<h2 id="在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。"><a href="#在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。" class="headerlink" title="在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。"></a>在课上测试时，我们需要你现场实现新的指令，对于这些新的指令，你可能需要在原有的数据通路上做哪些扩展或修改？提示：你可以对指令进行分类，思考每一类指令可能修改或扩展哪些位置。</h2><ul>
<li>对于R型指令，因为其操作是grf[rt]&lt;-ALU(grf[rs],grf[rt]),因此我们其实只需对ALU进行扩展即可，其他例如冒险等都与现有的add与sub指令一样</li>
<li>对于I型指令，其操作也更多和ALU相关，还有一些可能与MEM相关，因此可能需要在这两个地方进行扩展，同时可能还需要考虑M级对E级转发数据通路的扩展。</li>
<li>对于跳转型指令，直接跳转应该已经被jr和jal所占，因此其他的挑战指令大多应该都涉及寄存器两个读取值之间的某些运算甚至有涉及MEM的操作，因此还需扩展这两个部件，除此之外，这些跳转可能不能再提前至D级，因此可能要增加阻塞信号，或者如果仍保持再D级判断，那么需要考虑更多的转发信号，对转发数据通路进行一定的修改。</li>
</ul>
<h2 id="确定你的译码方式，简要描述你的译码器架构，并思考该架构的优势以及不足。"><a href="#确定你的译码方式，简要描述你的译码器架构，并思考该架构的优势以及不足。" class="headerlink" title="确定你的译码方式，简要描述你的译码器架构，并思考该架构的优势以及不足。"></a>确定你的译码方式，简要描述你的译码器架构，并思考该架构的优势以及不足。</h2><p>我的译码方式是分布式译码，译码器的架构是控制信号驱动型，先通过操作码和功能码将指令译出，这是与逻辑，再通过或逻辑通过相应的指令或起来来实现控制信号的译出。这样的架构使得代码量易于压缩，但若控制器出错，相应的错误比较难以查出。</p>
<h2 id="请详细描述你的测试方案及测试数据构造策略"><a href="#请详细描述你的测试方案及测试数据构造策略" class="headerlink" title="请详细描述你的测试方案及测试数据构造策略"></a>请详细描述你的测试方案及测试数据构造策略</h2><ul>
<li>构造策略：针对基本指令，应尽可能将其每种情况考虑到，同时我们还应将不涉及转发和涉及转发的情况都考虑到，不要有该转发没转发或者不该转发转发了的情况产生。而对于跳转指令，除了跳转本身以外，我们也要考虑冒险的情况，涉及转发和不涉及转发的情况都应被考虑。</li>
<li>测试方案：以下采用一个帮我查出bug的典型方案</li>
</ul>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x3018</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">1</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">31</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">3</span>,$<span class="number">2</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">3</span>,$<span class="number">2</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">4</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">4</span>,$<span class="number">0</span>,<span class="number">8</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">5</span>,$<span class="number">0</span>,<span class="number">8</span></span><br><span class="line"><span class="symbol">loop:</span><span class="keyword">add </span>$<span class="number">6</span>,$<span class="number">6</span>,$<span class="number">5</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">4</span>,$<span class="number">6</span>,loop</span><br></pre></td></tr></table></figure></div>
<p>在本方案里，首先对1号寄存器赋值，再存入内存并将值读出到31号寄存器里，再跳转，因为延时槽的原因，跳转的下一条指令add也会被执行，执行后跳转到下一条add指令，并向下执行，最后在beq指令由于4号寄存器与6号寄存器值相同，会再次跳转，并执行，最终结束程序。在该测试样例中，考虑了很多触及转发的情况，且对于基础指令和跳转指令均有，还考虑了跳转指令为程序最后一条指令（因此帮我查出一些错误）的情况，较为全面。</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理P6</title>
    <url>/2025/02/09/%E8%AE%A1%E7%BB%84/%E8%AE%A1%E7%BB%84P6/</url>
    <content><![CDATA[<h1 id="流水线CPU设计文档（多指令版）"><a href="#流水线CPU设计文档（多指令版）" class="headerlink" title="流水线CPU设计文档（多指令版）"></a>流水线CPU设计文档（多指令版）</h1><h2 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h2><p>本次流水线CPU的搭建在上一次的基础上多增了很多指令，其中包括计算型指令，存储型指令，跳转型指令。对于新增指令，我们其实只需考虑增加这条指令后要修改原来电路的哪些东西，想明白这一点之后，我们对代码的修改便会变得得心应手起来。</p>
<h3 id="数据通路图"><a href="#数据通路图" class="headerlink" title="数据通路图"></a>数据通路图</h3><p>再次附上数据通路图和logisim里的单周期CPU电路搭建图。<br><strong>数据通路：</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p6/%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF.png"
                     
                ><br><strong>logisim单周期CPU电路：</strong><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p6/single_cpu.png"
                     
                ><br>通过这两张图，我们对整个架构更加清晰，增加指令的时候也可以对着图来看有哪些信号或者模块需要修改</p>
<h3 id="修改思路"><a href="#修改思路" class="headerlink" title="修改思路"></a>修改思路</h3><ol>
<li>计算型指令（由于乘除相关指令要求我们模仿实际上的延时，因此乘除相关指令不放在此）：对于这一类指令，通过数据通路我们可以发现，要修改的模块只有<code>alu</code>模块，我们只需对其进行相应的扩展并修改对应的控制信号即可。具体来说，我们可能需要对<code>regwe</code>，<code>regdst</code>，<code>aluslt</code>，<code>aluopt</code>，<code>memreg</code>这些控制信号进行修改。</li>
<li>存取型指令：对于这一类指令，我们可能需要对<code>alu</code>模块进行一定的修改，因为存取的地址很可能是<code>alu</code>的计算结果，其次由于这次的指令新增了<code>sb</code>，<code>sh</code>，<code>lb</code>，<code>lh</code>四条指令，所以我们需要用一个四位的MEM写信号来控制写入数据的相应位数的数据是否写入存储器。具体来说，我们可能需要对<code>regwe</code>，<code>regdst</code>，<code>aluslt</code>，<code>aluopt</code>，<code>memreg</code>，<code>memwe</code>，<code>loadwe</code>这些控制信号进行修改，而其中<code>memwe</code>需要扩展到四位，而如果后续（如课上）还要新增这一类指令的话，可能涉及到一些新增的算术运算，那我们还需要扩展<code>alu</code>模块。</li>
<li>跳转型指令：在本次课下设计中新增的跳转型指令只有<code>bne</code>指令，而这条指令的实现与<code>beq</code>几乎一样，因此课下对这类指令的新增没有什么好说的。但我们仍然要明白新增这一类指令基本的修改方向。这类指令既可能涉及到运算，又可能涉及到存储，还一定会涉及到跳转，因此我们要将<code>alu</code>以及<code>npc</code>模块的修改全部纳入考虑范围内，又因为我们设计的是流水线CPU，因此如果涉及运算模块，我们需要将其加到D级，同时还可能需要修改<code>regwe</code>，<code>regdst</code>，<code>alust</code>，<code>aluopt</code>，<code>memreg</code>等控制信号。</li>
<li>乘除型指令：由于我们需要模拟真正乘除法部件执行乘除法的延迟，因此需要在E级新增一个模块，而<code>hi</code>和<code>lo</code>两个寄存器也放在这个模块里。这次课下要求执行乘法的时间为5个时钟周期，执行除法的时间为10个时钟周期，我们只需要拿一个计数寄存器来记录当前是第几个周期，到达周期之后将相应的数据写入相应寄存器即可（针对纯粹的乘除类指令）。而针对写和读<code>hi</code>或<code>lo</code>指令来说，我们不需要模拟这个延迟，直接写入和读出并参与流水线的其他步骤即可，也因此需要考虑他们的控制信号的变化。</li>
</ol>
<h3 id="冒险"><a href="#冒险" class="headerlink" title="冒险"></a>冒险</h3><p>仍然采用A-T法来解决该问题，只需将新增指令的Tnew和Tuse算出即可。满足A-T的条件，我们就将相应数据进行转发，不满足我们就阻塞一周期。而相应的数据也不会太复杂，其实我们仔细思考可以发现，有写入功能的指令他们写入的数据无非就是四种，一种是<code>mfhi</code>和<code>mflo</code>指令，它会写入从<code>hi</code>或<code>lo</code>寄存器中读取的数据，一种是<code>jal</code>，它会写入下一条指令的地址，一种是ALU计算型，他们回写入ALU的计算结果，一种是<code>lw</code>，会写入MEM的读取值，况且再结合上阻塞会发现，如果我们当前指令是与<code>lw</code>产生冒险，那一定会阻塞到lw流水到M级或W级，而那时便可将MEM读取值转发，因此我们注意将下一条指令的地址以及ALU的结果流水下去即可。<br/>还有一点需要注意的是对于一些不用相关数据的指令例如jr，我们不应把他们的Tuse设为0，而是应该设为一个尽可能大的数，不然会产生无谓的阻塞，使得运行周期加长。</p>
<h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>我们可以采用两种译码方式，一种是分布式译码，一种是集中式译码。集中式译码需要在某一级译码完成后将控制信号流水下去，这样流水的信号数量会很大，因此我采用的是分布式译码的方式，也就是在每一级对在该级的指令译码一次产生我所需要的控制信号即可，因此这样我会将控制器实例化4次。在控制器中除了单周期CPU里对应的控制信号以外，还需要加入转发的控制信号，我对Tuse和Tnew的计算也放进了控制器里。</p>
<h4 id="控制信号"><a href="#控制信号" class="headerlink" title="控制信号"></a>控制信号</h4><p><code>regwe=add|sub|ori|jal|lui|lw|lh|lb|and_|or_|slt|sltu|addi|andi|mfhi|mflo</code><br><code>regdst=(jal)?2:(add|sub|and_|or_|slt|sltu|mfhi|mflo)?1:0</code><br><code>aluslt=add|sub|beq|and_|or_|slt|sltu|bne|mult|multu|div|divu</code>  </p>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line">aluopt=(sltu)?<span class="number">6</span>:</span><br><span class="line">        (slt)?<span class="number">5</span>:</span><br><span class="line">        (lui)?<span class="number">4</span>:</span><br><span class="line">        (sub)?<span class="number">3</span>:</span><br><span class="line">        (add|lw|sw|addi|lh|lb|sh|sb)?<span class="number">2</span>:</span><br><span class="line">        (ori|or_)?<span class="number">1</span>:</span><br><span class="line">	    (and_|andi)?<span class="number">0</span>:</span><br><span class="line">        <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line">memreg=(mfhi|mflo)?<span class="number">3</span>:</span><br><span class="line">       (jal)?<span class="number">2</span>:</span><br><span class="line">       (lw|lh|lb)?<span class="number">1</span>:</span><br><span class="line">		<span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> D_rs_Tuse=(phase==<span class="number">2</span>&amp;&amp;add)?<span class="number">1</span>:</span><br><span class="line">                 (phase==<span class="number">2</span>&amp;&amp;sub)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;and_)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;or_)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;slt)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;sltu)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;jr)?<span class="number">0</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;addi)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;andi)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;ori)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;lui)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(lw|lh|lb))?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(sw|sh|sb))?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(beq|bne))?<span class="number">0</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(mult|multu|div|divu|mthi|mtlo))?<span class="number">1</span>:</span><br><span class="line">				 <span class="number">3</span>;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> D_rt_Tuse=(phase==<span class="number">2</span>&amp;&amp;add)?<span class="number">1</span>:</span><br><span class="line">                 (phase==<span class="number">2</span>&amp;&amp;sub)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;and_)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;or_)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;slt)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;sltu)?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;jr)?<span class="number">3</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;addi)?<span class="number">3</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;andi)?<span class="number">3</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;ori)?<span class="number">3</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;lui)?<span class="number">3</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(lw|lh|lb))?<span class="number">3</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(sw|sh|sb))?<span class="number">2</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(beq|bne))?<span class="number">0</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(mult|multu|div|divu))?<span class="number">1</span>:</span><br><span class="line">				 (phase==<span class="number">2</span>&amp;&amp;(mthi|mtlo|mfhi|mflo))?<span class="number">3</span>:</span><br><span class="line">				 <span class="number">3</span>;</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> Tnew=(phase==<span class="number">3</span>&amp;&amp;add)?<span class="number">1</span>:</span><br><span class="line">            (add)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;sub)?<span class="number">1</span>:</span><br><span class="line">			(sub)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;and_)?<span class="number">1</span>:</span><br><span class="line">			(and_)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;or_)?<span class="number">1</span>:</span><br><span class="line">			(or_)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;slt)?<span class="number">1</span>:</span><br><span class="line">			(slt)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;sltu)?<span class="number">1</span>:</span><br><span class="line">			(sltu)?<span class="number">0</span>:</span><br><span class="line">			(jr)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;addi)?<span class="number">1</span>:</span><br><span class="line">			(addi)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;andi)?<span class="number">1</span>:</span><br><span class="line">			(andi)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;ori)?<span class="number">1</span>:</span><br><span class="line">			(ori)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;lui)?<span class="number">1</span>:</span><br><span class="line">			(lui)?<span class="number">0</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;(lw|lh|lb))?<span class="number">2</span>:</span><br><span class="line">			(phase==<span class="number">4</span>&amp;&amp;(lw|lh|lb))?<span class="number">1</span>:</span><br><span class="line">			(phase==<span class="number">3</span>&amp;&amp;(mfhi|mflo))?<span class="number">1</span>:</span><br><span class="line">			(phase==<span class="number">4</span>&amp;&amp;(mfhi|mflo))?<span class="number">0</span>:</span><br><span class="line">			(lw|lh|lb)?<span class="number">0</span>:</span><br><span class="line">			(sw|sh|sb)?<span class="number">0</span>:</span><br><span class="line">			(beq|bne)?<span class="number">0</span>:</span><br><span class="line">			<span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><p>基本指令：</p>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">andi </span>$<span class="number">2</span>,$<span class="number">1</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="number">3</span>,$<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">4</span>,<span class="number">0x0011</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">5</span>,$<span class="number">5</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">5</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">5</span></span><br><span class="line"><span class="keyword">and </span>$<span class="number">7</span>,$<span class="number">6</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">and </span>$<span class="number">7</span>,$<span class="number">6</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">or </span>$<span class="number">8</span>,$<span class="number">7</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">or </span>$<span class="number">8</span>,$<span class="number">8</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">slt </span>$<span class="number">9</span>,$<span class="number">8</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">slt </span>$<span class="number">9</span>,$<span class="number">7</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sltu </span>$<span class="number">10</span>,$<span class="number">8</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">sltu </span>$<span class="number">10</span>,$<span class="number">7</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">2</span>,<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sh </span>$<span class="number">2</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sh </span>$<span class="number">2</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lb </span>$<span class="number">11</span>,-<span class="number">2</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,<span class="number">0</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,-<span class="number">2</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lh </span>$<span class="number">12</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lh </span>$<span class="number">12</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">13</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">mult </span>$<span class="number">12</span>,$<span class="number">13</span></span><br><span class="line"><span class="keyword">mfhi </span>$<span class="number">14</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">15</span>,$<span class="number">14</span>,$<span class="number">13</span></span><br><span class="line"><span class="keyword">multu </span>$<span class="number">15</span>,$<span class="number">14</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">17</span>,$<span class="number">16</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">div </span>$<span class="number">17</span>,$<span class="number">16</span></span><br><span class="line"><span class="keyword">mfhi </span>$<span class="number">18</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">18</span>,$<span class="number">18</span>,$<span class="number">18</span></span><br><span class="line"><span class="keyword">divu </span>$<span class="number">18</span>,$<span class="number">17</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">19</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">19</span>,$<span class="number">19</span>,$<span class="number">19</span></span><br><span class="line"><span class="keyword">mthi </span>$<span class="number">19</span></span><br><span class="line"><span class="keyword">mtlo </span>$<span class="number">17</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">20</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">20</span>,$<span class="number">20</span>,$<span class="number">19</span></span><br><span class="line"><span class="keyword">mfhi </span>$<span class="number">21</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">21</span>,$<span class="number">21</span>,$<span class="number">20</span></span><br></pre></td></tr></table></figure></div>
<p>跳转：</p>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x1011</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span>,$<span class="number">1</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">11</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">4</span>,$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">5</span>,$<span class="number">5</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">add </span>$<span class="number">11</span>,$<span class="number">11</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">11</span>,$<span class="number">0</span>,loop4</span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">7</span>,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">8</span>,$<span class="number">4</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">6</span>,$<span class="number">6</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">sw </span>$<span class="number">5</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="number">6</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">9</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">10</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">10</span>,loop1</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">9</span>,loop2</span><br><span class="line"><span class="symbol">loop1:</span><span class="keyword">sw </span>$<span class="number">10</span>,<span class="number">8</span>($<span class="number">2</span>)</span><br><span class="line"><span class="symbol">loop2:</span><span class="keyword">bne </span>$<span class="number">6</span>,$<span class="number">10</span>,loop3</span><br><span class="line"><span class="symbol">loop4:</span><span class="keyword">sw </span>$<span class="number">9</span>,<span class="number">12</span>($<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x301c</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">1</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">31</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="symbol">loop:</span><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">3</span>,$<span class="number">2</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">2</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">4</span>,$<span class="number">3</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">jal </span>loop</span><br><span class="line"><span class="keyword">ori </span>$<span class="number">5</span>,$<span class="number">4</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">6</span>,$<span class="number">4</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="为什么需要有单独的乘除法部件而不是整合进-ALU？为何需要有独立的-HI、LO-寄存器？"><a href="#为什么需要有单独的乘除法部件而不是整合进-ALU？为何需要有独立的-HI、LO-寄存器？" class="headerlink" title="为什么需要有单独的乘除法部件而不是整合进 ALU？为何需要有独立的 HI、LO 寄存器？"></a>为什么需要有单独的乘除法部件而不是整合进 ALU？为何需要有独立的 HI、LO 寄存器？</h2><ul>
<li>因为我们要模仿真正乘除法部件执行乘除法的延迟，如果整合进了ALU模块，那么因为这个延迟可能会阻塞其他指令多个周期，导致运行的效率十分低，而设计单独的乘除法部件就可以不影响其他指令的执行。</li>
<li>如果不设置单独的HI、LO寄存器，那么因为乘除法的延迟，当乘除模块到达时间想要写入寄存器的时候，这时可能有其他指令也想要写入寄存器，造成矛盾，况且HI、LO寄存器内的值只供读出到某个寄存器里，而非读出来做运算，因此需要独立出来。</li>
</ul>
<h2 id="真实的流水线-CPU-是如何使用实现乘除法的？请查阅相关资料进行简单说明"><a href="#真实的流水线-CPU-是如何使用实现乘除法的？请查阅相关资料进行简单说明" class="headerlink" title="真实的流水线 CPU 是如何使用实现乘除法的？请查阅相关资料进行简单说明"></a>真实的流水线 CPU 是如何使用实现乘除法的？请查阅相关资料进行简单说明</h2><p>真实的流水线CPU中，乘法是由一级一级的门级电路搭建来的，因此是一个周期一个周期的传下去，每个周期计算特定的几位，最后走完整个乘法模块的时候得到最终结果。而除法使用试商法，通过组合逻辑在一个周期内计算4位左右的商，经过8个周期结束计算。</p>
<h2 id="请结合自己的实现分析，你是如何处理-Busy-信号带来的周期阻塞的"><a href="#请结合自己的实现分析，你是如何处理-Busy-信号带来的周期阻塞的" class="headerlink" title="请结合自己的实现分析，你是如何处理 Busy 信号带来的周期阻塞的"></a>请结合自己的实现分析，你是如何处理 Busy 信号带来的周期阻塞的</h2><p>当D级指令为乘除模块相关指令（即mult,multu,div,divu,mfhi,mflo,mthi,mtlo）时且E级的Busy信号为1时，阻塞D级。</p>
<h2 id="请问采用字节使能信号的方式处理写指令有什么好处"><a href="#请问采用字节使能信号的方式处理写指令有什么好处" class="headerlink" title="请问采用字节使能信号的方式处理写指令有什么好处"></a>请问采用字节使能信号的方式处理写指令有什么好处</h2><p>首先可以很清晰地看到具体是哪几位要写入，并且针对sw、sh、sb都使用同样的写使能信号，不用引进多的使能信号增加模块复杂性。</p>
<h2 id="请思考，我们在按字节读和按字节写时，实际从-DM-获得的数据和向-DM-写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢"><a href="#请思考，我们在按字节读和按字节写时，实际从-DM-获得的数据和向-DM-写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢" class="headerlink" title="请思考，我们在按字节读和按字节写时，实际从 DM 获得的数据和向 DM 写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢"></a>请思考，我们在按字节读和按字节写时，实际从 DM 获得的数据和向 DM 写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢</h2><p>是同一字节，但不是一字节。在只需要对字节或半字访问时，按字节访问内存性能更由优势。</p>
<h2 id="为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助"><a href="#为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助" class="headerlink" title="为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助"></a>为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助</h2><p>首先命名上规范，这样可以让自己的代码较为清晰，容易查错。除此之外，将控制信号按指令的类别来定义和分类，这样考虑某类指令的时候，不需要去考虑其他的控制信号，也不用每个控制信号都要囊括所有指令。</p>
<h2 id="在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？"><a href="#在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？" class="headerlink" title="在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？"></a>在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？</h2><ul>
<li>存取和运算指令——转发+阻塞解决</li>
</ul>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">sb </span>$<span class="number">2</span>,<span class="number">0</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lh </span>$<span class="number">3</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">add </span>$<span class="number">3</span>,$<span class="number">3</span>,$<span class="number">3</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>乘除和存取指令——转发+阻塞解决</li>
</ul>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">sb </span>$<span class="number">2</span>,<span class="number">0</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lh </span>$<span class="number">3</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">mult </span>$<span class="number">4</span>,$<span class="number">3</span>,$<span class="number">3</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">5</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>运算（存取）和跳转指令——阻塞+转发解决</li>
</ul>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x301c</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">1</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">31</span>,<span class="number">4</span>($<span class="number">0</span>)</span><br><span class="line"><span class="symbol">loop:</span><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">1</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">jr </span>$<span class="built_in">ra</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">3</span>,$<span class="number">2</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">2</span>,$<span class="number">2</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">4</span>,$<span class="number">3</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">jal </span>loop</span><br><span class="line"><span class="keyword">ori </span>$<span class="number">5</span>,$<span class="number">4</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">6</span>,$<span class="number">4</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></div>
<h2 id="如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证覆盖了所有需要测试的情况；如果你是完全随机生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了特殊的策略，比如构造连续数据冒险序列，请你描述一下你使用的策略如何结合了随机性达到强测的效果"><a href="#如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证覆盖了所有需要测试的情况；如果你是完全随机生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了特殊的策略，比如构造连续数据冒险序列，请你描述一下你使用的策略如何结合了随机性达到强测的效果" class="headerlink" title="如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证覆盖了所有需要测试的情况；如果你是完全随机生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了特殊的策略，比如构造连续数据冒险序列，请你描述一下你使用的策略如何结合了随机性达到强测的效果"></a>如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证覆盖了所有需要测试的情况；如果你是完全随机生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了特殊的策略，比如构造连续数据冒险序列，请你描述一下你使用的策略如何结合了随机性达到强测的效果</h2><p>由于数据生成器生成的样例可能前后关联性不够强，因此我手动构造了一些样例。这些样例首先要保证针对每一条指令都将其的所有情况考虑完整，比如对于跳转指令就不能只考虑向后跳转还要考虑向前跳转。除此之外，由于流水线CPU很重要的就是解决冒险，因此还要考虑不同指令间的冒险，而这有可能发生在同类型指令，也可能发生在不同类型指令，因此两种情况我们都需要考虑到。在设计不同类型指令冒险的代码的时候，在保证前面的测试正确的情况下，可以只挑选一个类型里的典型指令出来，不必一个类型里的所有指令都拿出来设计一遍，因为同一类型下的转发和阻塞实现是相同的。</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理P3(Logisim)</title>
    <url>/2025/02/09/%E8%AE%A1%E7%BB%84/P3-Logisim/</url>
    <content><![CDATA[<h1 id="单周期CPU设计草稿"><a href="#单周期CPU设计草稿" class="headerlink" title="单周期CPU设计草稿"></a>单周期CPU设计草稿</h1><p>要搭建一个单周期CPU，首先要做的是清楚CPU工作的流程。</p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>在每一个周期，PC给出指令所在的地址，CPU去寻找这个地址中的指令，在之后，根据得到的指令判断具体执行什么操作（这些操作可能包含相加两个寄存器的值存入另一个寄存器，将某个寄存器的值写入某个内存空间，将PC进行算术操作得到下一个PC的值等），在这期间，PC还应自增（+4），执行完操作后，等到下一个时钟上升沿得到新的PC值并继续进行相关操作。</p>
<h2 id="模块需求"><a href="#模块需求" class="headerlink" title="模块需求"></a>模块需求</h2><p>根据工作流程，我们可以看到其实CPU工作总的来说就是一个状态的不断转移，在每个状态中做相应的操作。<br/>进一步看，每个状态完全由PC来决定，所以状态转移其实只涉及PC的算术运算，将PC的算术运算电路与PC寄存器相连就能实现状态转移。<br/>而操作部分其实就完完全全是组合逻辑电路，但操作部分是很庞大的系统，我们需要对其进行细分实现更小的模块。根据工作流程中的操作分析，我们可以看到在这一部分我们应该需要一个解析指令的模块，一个寄存器堆，一个算术运算模块，一个数据存储器。但由于指令的不同，执行的相关操作也不同，例如对于add与sub，一个在算术运算模块中需要执行加法操作，一个需要执行减法操作，因此我们需要相应的控制信号来控制每个操作模块的具体操作（相应的控制信号有寄存器堆写信号，数据存储器写信号，数据存储器读信号，指令相关位数选择信号，算术运算模块操作数选择信号，算术运算模块选项信号，寄存器堆数据输入选择信号），而这些控制信号便是由相应的指令来得出的，因此还需要一个控制器。</p>
<h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>我们以lw指令为例说明过程。<br>当指令的操作码解析出来为100011时，说明该指令为lw。接下来我们来具体看看后续操作相关模块的工作情况。<br>lw操作具体为在内存空间中读取一个数据并存入一个寄存器，内存空间地址的计算为第一个寄存器的值加上立即数。因此，在这时算术运算模块执行的操作为加法，数据存储器允许读取数据，寄存器堆允许写入。电路连接草图如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p3/%E6%88%AA%E5%B1%8F_2024-10-25_10.28.36.png"
                     
                ></p>
<h2 id="控制信号"><a href="#控制信号" class="headerlink" title="控制信号"></a>控制信号</h2><p>在模块需求部分中，我们已经分析了所需要的控制信号有寄存器堆写信号（regwe），数据存储器写信号（memwe），数据存储器读信号（loadwe），指令相关位数选择信号（regdst），算术运算模块操作数选择信号（aluslt），算术运算模块选项信号（aluopt），寄存器堆数据输入选择信号（memreg）。而所有的控制信号都与当前的指令相关，因此我们只需针对每一个指令去考虑每个控制信号的值即可。具体如下：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p3/%E6%88%AA%E5%B1%8F_2024-10-25_10.45.06.png"
                     
                ></p>
<h2 id="CPU草图"><a href="#CPU草图" class="headerlink" title="CPU草图"></a>CPU草图</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p3/cpu.png"
                     
                ></p>
<hr>
<h2 id="易遗漏或出错的地方"><a href="#易遗漏或出错的地方" class="headerlink" title="易遗漏或出错的地方"></a>易遗漏或出错的地方</h2><ul>
<li>在对beq指令做考虑的时候，<del>需要对PC与立即数的4倍相加</del>，我们要意识到这时PC首先应该自增再与立即数的4倍相加，这才是正确的操作。</li>
<li>若当前指令为I型指令，由于算术运算模块对数据位数的限制，<del>我们用一个位拓展器将立即数扩展到32位就行了</del>，对于不同的I型指令，立即数的扩展方式是不同的，例如对于ori要对立即数进行无符号扩展，对于lw要对立即数进行有符号扩展，因此我们需要加一个选择信号去对立即数进行何种扩展方式做出说明。（幸运的是该次CPU设计只涉及ori一个需要对立即数进行无符号扩展的指令，因此将ori信号作为选择信号即可，若后续增加指令，加上一个或电路即可）</li>
</ul>
<hr>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><p>测试中尽可能使每条指令的每种情况都覆盖，并且由最基本的指令开始构造测试（不需要其他指令就可以检验覆盖率的指令为最基本的），因此，从ori与lui开始构造，并通过他们几条指令让寄存器的值不全为0，是得能对后续指令做检验。<br/>根据以上指导思想设计的MIPS测试程序如下：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ori $1,$0,0x1011</span><br><span class="line">ori $2,$1,0x0111</span><br><span class="line">ori $11,$0,2</span><br><span class="line">lui $3,0</span><br><span class="line">lui $3,0x0111</span><br><span class="line">lui $3,0xffff</span><br><span class="line">ori $4,$3,0xffff</span><br><span class="line">lui $3,0x0111</span><br><span class="line">add $5,$3,$0</span><br><span class="line">add $5,$4,$0</span><br><span class="line">add $5,$3,$1</span><br><span class="line">add $5,$3,$4</span><br><span class="line">add $5,$4,$4</span><br><span class="line">add $5,$5,$5</span><br><span class="line">loop3:add $11,$11,$4</span><br><span class="line">beq $11,$0,loop4</span><br><span class="line">sub $6,$3,$0</span><br><span class="line">sub $6,$4,$0</span><br><span class="line">sub $6,$3,$1</span><br><span class="line">sub $6,$3,$4</span><br><span class="line">ori $7,$0,1</span><br><span class="line">sub $8,$4,$7</span><br><span class="line">sub $6,$4,$8</span><br><span class="line">sub $6,$6,$6</span><br><span class="line">sub $6,$3,$4</span><br><span class="line">loop3:sw $5,4($1)</span><br><span class="line">sw $6,4($2)</span><br><span class="line">nop</span><br><span class="line">lw $9,4($1)</span><br><span class="line">lw $10,4($2)</span><br><span class="line">beq $5,$10,loop1</span><br><span class="line">beq $5,$9,loop2</span><br><span class="line">loop1:sw $10,8($2)</span><br><span class="line">loop2:beq $6,$10,loop3</span><br><span class="line">loop4:sw $9,12($2)</span><br></pre></td></tr></table></figure></div>
<h1 id="单周期CPU思考题"><a href="#单周期CPU思考题" class="headerlink" title="单周期CPU思考题"></a>单周期CPU思考题</h1><h2 id="单周期-CPU-所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能？"><a href="#单周期-CPU-所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能？" class="headerlink" title="单周期 CPU 所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能？"></a>单周期 CPU 所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能？</h2><h3 id="状态转移功能"><a href="#状态转移功能" class="headerlink" title="状态转移功能"></a>状态转移功能</h3><ul>
<li>NPC模块</li>
<li><ul>
<li>NPC模块当中，需要判断下一个PC的值，如果当前指令不是beq指令，则PC相对于当前值加4便得到下一个PC值，并在下个时钟上沿到来时存入PC寄存器，否则在加4的基础上，与当前获得的立即数的4倍相加得到下一个PC值，并在下个时钟上沿到来时存入PC寄存器。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="状态存储功能"><a href="#状态存储功能" class="headerlink" title="状态存储功能"></a>状态存储功能</h3><ul>
<li>PC存储器</li>
<li><ul>
<li>PC存储器存储当前周期PC的值，并以该值指导后续工作电路的所有操作。</li>
</ul>
</li>
<li>GRF模块</li>
<li><ul>
<li>在Controller根据当前PC的值读出对应的指令后，GRF根据指令做出相关操作，并决定是否在内部某个存储器存入新的值。</li>
</ul>
</li>
<li>DM模块</li>
<li><ul>
<li>在Controller根据当前PC的值读出对应的指令后，DM根据指令做出相关操作，并决定是否在内部某个空间写入新的值。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="模块中-IM-使用-ROM，-DM-使用-RAM，-GRF-使用-Register，这种做法合理吗？-请给出分析，若有改进意见也请一并给出"><a href="#模块中-IM-使用-ROM，-DM-使用-RAM，-GRF-使用-Register，这种做法合理吗？-请给出分析，若有改进意见也请一并给出" class="headerlink" title="模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用 Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出"></a>模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用 Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出</h2><ul>
<li>IM模块为指令存储器，由于在CPU执行操作的时候是从相应的地址空间里读取该周期使用的指令，不会对指令作出修改，也就是针对指令只需实现读的操作，因此使用ROM来实现IM模块是合理的。</li>
<li>DM模块为数据存储器，是在相应的地址空间存储数据，在指令不同时，可以从相应的地址空间读取数据，也可以将新的数据写入相应的地址空间，因此需要同时做到读和写的操作，因此使用RAM可以实现且最为方便。</li>
<li>GRF是通用寄存器组，里面放置了三十二个寄存器用于读取和写入数据，且搭建的是单周期CPU，因此在每个周期最多对里面的一个寄存器写入新数据（该新数据将在下一个时钟上沿存入寄存器），因此使用三十二个寄存器的组合来实现GRF是合理的。</li>
</ul>
<hr>
<h2 id="在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路"><a href="#在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路" class="headerlink" title="在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路"></a>在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路</h2><h3 id="beq指令操作模块"><a href="#beq指令操作模块" class="headerlink" title="beq指令操作模块"></a>beq指令操作模块</h3><ul>
<li>该模块是实现beq操作的模块，因为针对beq指令，最终所需要操作改变的数并不是寄存器里的值或者内存空间的值，而是PC的值，因此需要将其单独拿出来进行一个操作。该模块由原本的（PC+4）与当前立即数的四倍相加的一个运算电路再加上由beq信号和alu模块判断相等信号的与作为选择信号的多路选择器构成，若当前两个寄存器的值相等且beq信号为1，那么下一个PC将为经过运算电路得到的值，否则就为（PC+4）。</li>
</ul>
<hr>
<h2 id="实现-nop-空指令，我们并不需要将它加入控制信号真值表，为什么？"><a href="#实现-nop-空指令，我们并不需要将它加入控制信号真值表，为什么？" class="headerlink" title="实现 nop 空指令，我们并不需要将它加入控制信号真值表，为什么？"></a>实现 <code>nop</code> 空指令，我们并不需要将它加入控制信号真值表，为什么？</h2><ul>
<li>nop指令为空指令，如若该周期CPU执行该条指令，则不会发生任何操作（除了PC自增）。不将nop指令加入控制信号真值表说明在计算相应控制信号的值时，我们不需考虑nop指令的影响，也即当当前指令为nop时，所有控制信号的值均为0。这时，首先考虑beq指令操作部分，由于此时beq信号为0，因此下一个PC的值只是当前PC的值的简单自增，不受影响；而针对其他指令操作部分，我们关心的仅是这些操作部分会不会在nop指令期间影响寄存器的值或者内存空间里存储的值，这都与写操作有关，但nop指令期间寄存器写信号和数据存储器写信号均为0，因此不会执行写操作，所以二者内部的值都不会改变。</li>
</ul>
<hr>
<h2 id="阅读-Pre-的-“MIPS-指令集及汇编语言”-一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。"><a href="#阅读-Pre-的-“MIPS-指令集及汇编语言”-一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。" class="headerlink" title="阅读 Pre 的 [“MIPS 指令集及汇编语言”]一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。"></a>阅读 Pre 的 [“MIPS 指令集及汇编语言”]一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。</h2><p>测试样例的数据针对其给出的几条指令（<code>ori</code>, <code>lui</code>, <code>add</code>, <code>sw</code>, <code>lw</code>, <code>beq</code>）已经较强，每个指令的覆盖率都较高，但仍在一些方面存在不足，下面列出不足之处：</p>
<ul>
<li><code>add</code>进行了正数和正数，正数和负数，负数和负数的操作，但未进行0与正负数的操作，不能确保CPU是否会在至少有一个数为0时出差错。</li>
<li>测试样例针对<code>beq</code>指令只考虑了单向向下的跳转，未考虑立即数为负数，即往回跳转的情况，而CPU很可能在这种情况出错</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理P4</title>
    <url>/2025/02/09/%E8%AE%A1%E7%BB%84/%E8%AE%A1%E7%BB%84P4/</url>
    <content><![CDATA[<h1 id="单周期CPU设计草稿（verilog"><a href="#单周期CPU设计草稿（verilog" class="headerlink" title="单周期CPU设计草稿（verilog)"></a>单周期CPU设计草稿（verilog)</h1><p>本次课下需要我们通过verilog来设计一个支持10条指令的单周期CPU。由于在上周我们已经通过logisim搭建了一个单周期CPU，所以本次的任务其实简单来说就是通过一个硬件描述语言去描述搭建好的电路。<br>我们还是先来简单捋一下构建思路。</p>
<h2 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h2><ul>
<li>工作流程：每一个周期，PC给出指令所在的地址，CPU去寻找这个地址中的指令，在之后，根据得到的指令判断具体执行什么操作，并判断下一个周期的PC的取值。</li>
<li>模块需求：我们希望在编写verilog的时候能像在logisim里一样使用不同的模块，并在最后使用这些模块来构成整个CPU。而通过相应的指令和流程，我们可以编写以下几个模块：im（指令存储器），grf（寄存器堆），alu（算术运算模块），dm（数据存储器），controller（控制器）以及最顶层的模块mips。</li>
</ul>
<p>（附上单周期CPUlogisim搭建图）<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p5/single_cpu.png"
                     
                ></p>
<h2 id="模块分析"><a href="#模块分析" class="headerlink" title="模块分析"></a>模块分析</h2><ul>
<li><ul>
<li>mips：作为最顶层的模块，这个模块也即CPU本身，它包含了其他的子模块，在这个模块当中，只需要定义相关的信号将子模块联系起来，除此之外其唯一需要做的就是计算下一个pc的值，因此该模块中应有一个pc的计算部分。图示如下：<br/><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p4/mips.png"
                     
                ></li>
</ul>
</li>
<li><ul>
<li>im：指令存储器模块，需要一个地址信号输入，并输出指令编码。<br/><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p4/im.png"
                     
                ></li>
</ul>
</li>
<li><ul>
<li>grf：寄存器堆模块，需要三个地址信号，一个写入数据，一个写入数据使能信号，时钟和复位信号。<br/><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p4/grf.png"
                     
                ></li>
</ul>
</li>
<li><ul>
<li>alu：算术运算模块，在这个模块本人设计了与或加减左移及相等6种运算，需要两个运算数输入，一个操作选择信号，一个结果输出，为了方便并再加一个等于输出信号（判断输入的两数是否相等）<br/><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p4/alu.png"
                     
                ></li>
</ul>
</li>
<li><ul>
<li>dm：数据存储器模块，需要时钟和复位信号，写使能和读使能信号，地址和写入数据信号，并输出一个读出的数据。<br/><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p4/dm.png"
                     
                ></li>
</ul>
</li>
<li><ul>
<li>controller：控制器模块，输入仍然是指令的操作码和功能码，输出包括了该电路中所有的控制信号。但本次增加了两条跳转指令，分别是jal和jr，因此在确定控制信号时还要考虑进这两条指令。简单分析即可知，由于这两条都是跳转指令，所以数据存储器既不写数据也不读数据即可，但对于jal来说，需要对31号寄存器存入下一条指令的地址，因此grf的写入地址应为31，写入数据为下一条指令的地址，对于jr来说就简单了，寄存器堆也不用写数据，因此将其写使能信号置零即可。<br/>jal:regwe-&gt;1,memwe-&gt;0,loadwe-&gt;0<br/>jr:regwe-&gt;0,memwe-&gt;0,loadwe-&gt;0<br/><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p4/%E6%88%AA%E5%B1%8F_2024-10-25_10.45.06.png"
                     
                ><br/>由于grf写入地址现在有三种情况，下一个pc的值也有三种情况，因此我们还得在上一次控制信号的基础上再加上两个控制信号，但这两个控制信号直接由jal和jr来当即可，也即当目前指令为jal（jr）时，jal（jr）置1.</li>
</ul>
</li>
</ul>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><ol>
<li>基本指令测试（不含jal和jr）</li>
</ol>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x1011</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span>,$<span class="number">1</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">11</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">4</span>,$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">5</span>,$<span class="number">5</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">add </span>$<span class="number">11</span>,$<span class="number">11</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">11</span>,$<span class="number">0</span>,loop4</span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">7</span>,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">8</span>,$<span class="number">4</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">6</span>,$<span class="number">6</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">sw </span>$<span class="number">5</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="number">6</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">nop</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">lw </span>$<span class="number">9</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">10</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">10</span>,loop1</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">9</span>,loop2</span><br><span class="line"><span class="symbol">loop1:</span><span class="keyword">sw </span>$<span class="number">10</span>,<span class="number">8</span>($<span class="number">2</span>)</span><br><span class="line"><span class="symbol">loop2:</span><span class="keyword">beq </span>$<span class="number">6</span>,$<span class="number">10</span>,loop3</span><br><span class="line"><span class="symbol">loop4:</span><span class="keyword">sw </span>$<span class="number">9</span>,<span class="number">12</span>($<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>jal与jr测试</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ori $1,$0,1</span><br><span class="line">ori $31,$0,0x3014</span><br><span class="line">loop:add $2,$1,$1</span><br><span class="line">jr $ra</span><br><span class="line">add $3,$2,$0</span><br><span class="line">add $4,$3,$2</span><br><span class="line">jal loop</span><br><span class="line">ori $5,$4,$0</span><br></pre></td></tr></table></figure></div>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="根据你的理解回答，这个-addr-信号又是从哪里来的？地址信号-addr-位数为什么是-11-2-而不是-9-0-？"><a href="#根据你的理解回答，这个-addr-信号又是从哪里来的？地址信号-addr-位数为什么是-11-2-而不是-9-0-？" class="headerlink" title="根据你的理解回答，这个 addr 信号又是从哪里来的？地址信号 addr 位数为什么是 [11:2] 而不是 [9:0] ？"></a>根据你的理解回答，这个 addr 信号又是从哪里来的？地址信号 addr 位数为什么是 [11:2] 而不是 [9:0] ？</h2><p>addr信号是从alu的输出中得来的。我们自行写的dm当中，一个地址可以存储一个字，但在MIPS里，地址是字对齐的，也即存一个字的地址都是4的倍数，因此实际上dm对应的地址是真正的地址除以4，dm地址有10位，也就对应aluout的第11到第2位。</p>
<h2 id="思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣"><a href="#思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣" class="headerlink" title="思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣"></a>思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣</h2><ol>
<li>指令对应控制信号<br>代码示例（在此仅给出ori指令相关代码作为示例）：</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">module controller(</span><br><span class="line">	//信号定义</span><br><span class="line">	)</span><br><span class="line">	always @(*) begin</span><br><span class="line">	if(ori == 1)begin</span><br><span class="line">	regwe=1;</span><br><span class="line">	aluopt=&#x27;b001</span><br><span class="line">	ori=1;</span><br><span class="line">	end</span><br><span class="line">	//其余指令判断相关控制信号</span><br><span class="line">	end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>控制信号对应指令<br>代码示例：</li>
</ol>
<pre><code>module controller(
	//信号定义
	)
	always @(*)begin
	regwe = add | sub | ori | lw | lui | jal;
	regdst = add | sub ;
	//其余信号
endmodule
</code></pre>
<ul>
<li>第二种方式代码量可能更小，第一种方式更为直观，且在运行时出错的话较容易定位到问题</li>
</ul>
<h2 id="请对比同步复位与异步复位这两种方式的-reset-信号与-clk-信号优先级的关系"><a href="#请对比同步复位与异步复位这两种方式的-reset-信号与-clk-信号优先级的关系" class="headerlink" title="请对比同步复位与异步复位这两种方式的 reset 信号与 clk 信号优先级的关系"></a>请对比同步复位与异步复位这两种方式的 reset 信号与 clk 信号优先级的关系</h2><p>在同步复位下，clk信号的优先级高于reset信号，要等到每一个时钟周期上升沿到来时才能进行复位；而异步复位下，reset信号的优先级高于clk信号，只要reset为高电平，便可进行复位，无需考虑时钟的限制。</p>
<h2 id="请说明为什么在忽略溢出的前提下，addi-与-addiu-是等价的，add-与-addu-是等价的"><a href="#请说明为什么在忽略溢出的前提下，addi-与-addiu-是等价的，add-与-addu-是等价的" class="headerlink" title="请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的"></a>请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的</h2><ul>
<li>add：If the addition results in 32-bit 2’s complement arithmetic overflow, the destination register is not modified and an Integer Overflow exception occurs</li>
<li>addu：The term “unsigned” in the instruction name is a misnomer; this operation is 32-bit modulo arithmetic that does not trap on overflow. This instruction is appropriate for unsigned arithmetic, such as address arithmetic, or integer arithmetic environments that ignore overflow, such as C language arithmetic<br>根据以上解释可知，addu其实是一种32位的模运算，就算溢出了也不会有影响，取其模值即可，而add如果溢出，也不会修改目标寄存器的值，但会抛出一个溢出异常，因此在不考虑溢出的情况下，目标寄存器的值其实也是32位模运算下的值，所以二者等价，同理对addi与addiu</li>
</ul>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理P7</title>
    <url>/2025/02/09/%E8%AE%A1%E7%BB%84/%E8%AE%A1%E7%BB%84P7/</url>
    <content><![CDATA[<h1 id="mips微系统设计文档"><a href="#mips微系统设计文档" class="headerlink" title="mips微系统设计文档"></a>mips微系统设计文档</h1><h2 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h2><p>本次课下需要我们用verilog语言搭建一个mips微系统。整个系统是建立在P6的基础上的，除了和相关操作相关的指令以外，其余指令均来自P6。但该微系统和我们P6搭建的CPU又是区别极大的，毕竟我们P6只是搭建了一个CPU，而本次我们需要搭建一个系统，CPU只是其中一个部分，我们还需要实现外设（计时器和中断发生器），并将CPU和外设连接起来形成一个整体也即系统。好在助教们非常好心，已经将所有的外设都给我们写好了，因此我们要做的只是将外设和CPU进行连接，使他们能进行数据的传输与交换，而这也即是我们要实现的系统桥部分。<del>这样一看，P7似乎很简单？</del> 是的，如果只需要实现系统桥的话，那确实非常简单，最大的难度在于检验线路连接是否正确，但这是我们构建的系统是没有动力的，一旦遇到障碍，它不会想去解决它，而是死马当活马医，执行错误的操作。因此我们为了要搭建出一个“积极向上”的系统，还有一个重头戏就是解决相应的异常和中断。而这无疑是P7中最困难的部分 <del>（除了读懂教程以外）</del>。因此总结下来，我们P7要做的事无非就两件：处理异常中断和搭建系统桥。</p>
<h2 id="异常和中断"><a href="#异常和中断" class="headerlink" title="异常和中断"></a>异常和中断</h2><p>在这之后除非特定说明，异常都指CPU执行指令中出现的异常，中断都指外设传递中断信号给CPU，二者发生后都需要进入异常处理程序。要清晰的编写相关代码，我们首先要明确什么情况会出现异常以及中断。除此之外，与处理异常和中断有紧密联系的是新增模块CP0，简单来说，该模块就是根据当前信息判断是否发生异常或中断并输出是否进入异常处理程序的控制信号<code>req</code>，此外还需保存异常或中断的相关信息以及当前的受害PC以便异常处理程序结束后跳回。</p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">指令</th>
<th align="center">描述</th>
<th align="center">异常码</th>
<th align="center">判断流水级</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ADEL</td>
<td align="center">all</td>
<td align="center">PC地址未对齐</td>
<td align="center">4</td>
<td align="center">F</td>
</tr>
<tr>
<td align="center">ADEL</td>
<td align="center">all</td>
<td align="center">PC地址超范围</td>
<td align="center">4</td>
<td align="center">F</td>
</tr>
<tr>
<td align="center">ADEL</td>
<td align="center">lw</td>
<td align="center">取数地址未与4字节对齐</td>
<td align="center">4</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADEL</td>
<td align="center">lh</td>
<td align="center">取数地址未与2字节对齐</td>
<td align="center">4</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADEL</td>
<td align="center">lh、lb</td>
<td align="center">取Timer寄存器的值</td>
<td align="center">4</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADEL</td>
<td align="center">load</td>
<td align="center">计算地址时加法溢出</td>
<td align="center">4</td>
<td align="center">E</td>
</tr>
<tr>
<td align="center">ADEL</td>
<td align="center">load</td>
<td align="center">取数地址超出范围</td>
<td align="center">4</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADES</td>
<td align="center">sw</td>
<td align="center">存数地址未与4字节对齐</td>
<td align="center">5</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADES</td>
<td align="center">sh</td>
<td align="center">存数地址未与2字节对齐</td>
<td align="center">5</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADES</td>
<td align="center">sh、sb</td>
<td align="center">存Timer寄存器的值</td>
<td align="center">5</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADES</td>
<td align="center">store</td>
<td align="center">计算地址加法溢出</td>
<td align="center">5</td>
<td align="center">E</td>
</tr>
<tr>
<td align="center">ADES</td>
<td align="center">store</td>
<td align="center">向计时器的Count寄存器存值</td>
<td align="center">5</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">ADES</td>
<td align="center">store</td>
<td align="center">存数地址超出范围</td>
<td align="center">5</td>
<td align="center">M</td>
</tr>
<tr>
<td align="center">SYSCALL</td>
<td align="center">syscall</td>
<td align="center">系统调用</td>
<td align="center">8</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">RI</td>
<td align="center">-</td>
<td align="center">未知指令</td>
<td align="center">10</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">OV</td>
<td align="center">add、addi、sub</td>
<td align="center">算术溢出</td>
<td align="center">12</td>
<td align="center">E</td>
</tr>
</tbody></table>
<p>每种异常的判断都是较为简单的，相应异常该在哪一流水级判断我也在表格中列出（我的实现），需要注意的是，我们判断相应异常并产生对应的异常码的时候，需要一级一级流水到CP0所在的流水级，比如我的CP0设在M级，那异常码就要流水到M级再考虑写入CP0，而不是一旦判断出异常马上准备写入CP0，除此之外，若在前一流水级和当前流水级都产生了异常，则以前一流水级的异常为准。</p>
<h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>在P7部分涉及到的中断是由中断发生器和两个计时器所给出的，他们会给CPU中断信号，相应的异常码为0，若要响应中断，则应将0写入CP0记录异常码的相应位置。</p>
<p><strong>中断和异常的优先级：中断优先！！！</strong></p>
<h3 id="CP0"><a href="#CP0" class="headerlink" title="CP0"></a>CP0</h3><p>我的CP0的相应的端口的定义就采用了教程中的定义。</p>
<table>
<thead>
<tr>
<th align="center">端口</th>
<th align="center">方向</th>
<th align="center">位数</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">clk</td>
<td align="center">IN</td>
<td align="center">1</td>
<td align="center">时钟信号</td>
</tr>
<tr>
<td align="center">reset</td>
<td align="center">IN</td>
<td align="center">1</td>
<td align="center">复位信号</td>
</tr>
<tr>
<td align="center">en</td>
<td align="center">IN</td>
<td align="center">1</td>
<td align="center">写使能信号</td>
</tr>
<tr>
<td align="center">CP0Add</td>
<td align="center">IN</td>
<td align="center">5</td>
<td align="center">寄存器地址</td>
</tr>
<tr>
<td align="center">CP0In</td>
<td align="center">IN</td>
<td align="center">32</td>
<td align="center">CP0写入数据</td>
</tr>
<tr>
<td align="center">CP0Out</td>
<td align="center">OUT</td>
<td align="center">32</td>
<td align="center">CP0读出数据</td>
</tr>
<tr>
<td align="center">VPC</td>
<td align="center">IN</td>
<td align="center">32</td>
<td align="center">受害PC</td>
</tr>
<tr>
<td align="center">BDIn</td>
<td align="center">IN</td>
<td align="center">1</td>
<td align="center">是否是延迟槽指令</td>
</tr>
<tr>
<td align="center">ExcCodeln</td>
<td align="center">IN</td>
<td align="center">5</td>
<td align="center">记录异常类型</td>
</tr>
<tr>
<td align="center">HWInt</td>
<td align="center">IN</td>
<td align="center">6</td>
<td align="center">输入中断信号</td>
</tr>
<tr>
<td align="center">EXLClr</td>
<td align="center">IN</td>
<td align="center">1</td>
<td align="center">复位EXL</td>
</tr>
<tr>
<td align="center">EPCOut</td>
<td align="center">OUT</td>
<td align="center">32</td>
<td align="center">EPC值</td>
</tr>
<tr>
<td align="center">Req</td>
<td align="center">OUT</td>
<td align="center">1</td>
<td align="center">进入异常处理程序请求</td>
</tr>
</tbody></table>
<p>在每个周期，我们需要将HWInt写入CP0中的CAUSE寄存器的[15：10]位，同时，当异常或中断发生时，我们需要结合CP0中的SR寄存器的值来判断是否进入异常处理程序，如果进入，还应写入异常码和受害PC，具体实现代码如下：</p>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> Intreq=((HWint&amp;IM)!=<span class="number">0</span>)&amp;&amp;(!EXL)&amp;&amp;(IE);</span><br><span class="line"><span class="keyword">wire</span> Excreq=(EXCcode!=<span class="number">1</span>)&amp;&amp;(!EXL);</span><br><span class="line"><span class="keyword">assign</span> Req=Intreq|Excreq;</span><br><span class="line"><span class="keyword">always</span> @(<span class="keyword">posedge</span> clk)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	register[<span class="number">13</span>][<span class="number">15</span>:<span class="number">10</span>]&lt;=HWint;</span><br><span class="line">    <span class="keyword">if</span>(en) register[CP0addr]&lt;=CP0in;</span><br><span class="line">    <span class="keyword">if</span>(EXLclr) register[<span class="number">12</span>][<span class="number">1</span>]&lt;=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(Req)</span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">	    register[<span class="number">12</span>][<span class="number">1</span>]&lt;=<span class="number">1</span>;</span><br><span class="line">		register[<span class="number">14</span>]&lt;=BDin?VPC-<span class="number">4</span>:VPC;</span><br><span class="line">		register[<span class="number">13</span>][<span class="number">6</span>:<span class="number">2</span>]&lt;=Intreq?<span class="number">0</span>:EXCcode;</span><br><span class="line">		register[<span class="number">13</span>][<span class="number">31</span>]&lt;=BDin;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<h3 id="新增指令注意"><a href="#新增指令注意" class="headerlink" title="新增指令注意"></a>新增指令注意</h3><ul>
<li>eret：在D级判断eret出现后，将NPC改为CP0给出的EPC即可。该指令不存在延迟槽，所以如果是在D级判断其是否出现的话，需要设置一个flush信号清空后一条指令，要注意的是：1.该flush信号的优先级是低于stall信号的，也就是当发生阻塞的时候flush信号无效，仍然执行阻塞的相关操作 2.flush信号触发时，这时应该将EPC流水给D级以保证宏观PC的正确性。</li>
<li>mtc0:看似该指令的转发和阻塞用正常的AT法即可，但那只是针对于其和P6中已存在的指令来说，不要忘记了eret指令和mtc0指令是高度相关的，因此还要考虑mtc0和eret的冒险，针对该冒险，我们进行阻塞即可，即在D级出现eret且E级或M级出现mtc0时，进行阻塞即可。</li>
</ul>
<h3 id="其他注意"><a href="#其他注意" class="headerlink" title="其他注意"></a>其他注意</h3><ul>
<li>有关控制信号优先级：按reset&gt;req&gt;stall&gt;flush即可</li>
<li>有关宏观PC：因为我们外部中断的原因，因此宏观PC的正确性是十分重要的，我的设计中选取M级的PC作为宏观PC，因此在数据在流水线的传递中，我们在P6的基础上要进行一定程度的修改，在发生阻塞的时候，E级PC不能再置为0，要将D级PC正常传下去，同时若reset信号有效，我们应该将M级以前的PC全部修改为’h00003000，若req信号有效，我们应该将M级以前的PC全部修改为’h00004180，针对eret指令flush信号触发时，应该将EPC流水给D级。</li>
<li>有关乘除槽：按教程中的提交要求，我们只需在乘除槽的开启条件和mtlo、mthi的写使能分别加上!req即可。</li>
</ul>
<h2 id="系统桥"><a href="#系统桥" class="headerlink" title="系统桥"></a>系统桥</h2><p>前面说过，系统桥实现的其实就是将外设和CPU进行连接，使他们能进行数据的传输与交换，实现较为简单，唯一需要注意的由于信号过多相应信号是否连上且连对，直接呈现代码：</p>
<div class="code-container" data-rel="Verilog"><figure class="iseeu highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assign</span> dm_data_addr=(cpu_data_addr&gt;=<span class="number">0</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h2fff</span>)?cpu_data_addr:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> dm_data_wdata=cpu_data_wdata;</span><br><span class="line"><span class="keyword">assign</span> dm_data_byteen=(cpu_data_addr&gt;=<span class="number">0</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h2fff</span>)?cpu_data_byteen:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> tc0_data_addr=(cpu_data_addr&gt;=<span class="number">&#x27;h7f00</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f0b</span>)?cpu_data_addr:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> tc0_data_wdata=cpu_data_wdata;</span><br><span class="line"><span class="keyword">assign</span> tc0_we=(cpu_data_addr&gt;=<span class="number">&#x27;h7f00</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f0b</span>)?(|cpu_data_byteen):<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> tc1_data_addr=(cpu_data_addr&gt;=<span class="number">&#x27;h7f10</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f1b</span>)?cpu_data_addr:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> tc1_data_wdata=cpu_data_wdata;</span><br><span class="line"><span class="keyword">assign</span> tc1_we=(cpu_data_addr&gt;=<span class="number">&#x27;h7f10</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f1b</span>)?(|cpu_data_byteen):<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> itp_data_addr=(cpu_data_addr&gt;=<span class="number">&#x27;h7f20</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f23</span>)?<span class="number">&#x27;h7f20</span>:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> itp_data_byteen=(cpu_data_addr&gt;=<span class="number">&#x27;h7f20</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f23</span>)?cpu_data_byteen:<span class="number">0</span>;</span><br><span class="line"><span class="keyword">assign</span> cpu_data_rddata=(cpu_data_addr&gt;=<span class="number">0</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h2fff</span>)?m_data_rddata:</span><br><span class="line">                       (cpu_data_addr&gt;=<span class="number">&#x27;h7f00</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f0b</span>)?tc0_data_rddata:</span><br><span class="line">					   (cpu_data_addr&gt;=<span class="number">&#x27;h7f10</span>&amp;&amp;cpu_data_addr&lt;=<span class="number">&#x27;h7f1b</span>)?tc1_data_rddata:</span><br><span class="line">					   <span class="number">0</span>;</span><br></pre></td></tr></table></figure></div>
<hr>
<p><strong>按以上思路搭建该微系统，可以较为顺利地完成</strong></p>
<h1 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h1><p>无异常：</p>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">andi </span>$<span class="number">2</span>,$<span class="number">1</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="number">3</span>,$<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">4</span>,<span class="number">0x0011</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">5</span>,$<span class="number">5</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">5</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">5</span></span><br><span class="line"><span class="keyword">and </span>$<span class="number">7</span>,$<span class="number">6</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">and </span>$<span class="number">7</span>,$<span class="number">6</span>,$<span class="number">2</span></span><br><span class="line"><span class="keyword">or </span>$<span class="number">8</span>,$<span class="number">7</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">or </span>$<span class="number">8</span>,$<span class="number">8</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">slt </span>$<span class="number">9</span>,$<span class="number">8</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">slt </span>$<span class="number">9</span>,$<span class="number">7</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sltu </span>$<span class="number">10</span>,$<span class="number">8</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">sltu </span>$<span class="number">10</span>,$<span class="number">7</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">sw </span>$<span class="number">2</span>,<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sh </span>$<span class="number">2</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sh </span>$<span class="number">2</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lb </span>$<span class="number">11</span>,-<span class="number">2</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,<span class="number">0</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,-<span class="number">2</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sb </span>$<span class="number">11</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lh </span>$<span class="number">12</span>,-<span class="number">1</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lh </span>$<span class="number">12</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">13</span>,-<span class="number">3</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">mult </span>$<span class="number">12</span>,$<span class="number">13</span></span><br><span class="line"><span class="keyword">mfhi </span>$<span class="number">14</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">15</span>,$<span class="number">14</span>,$<span class="number">13</span></span><br><span class="line"><span class="keyword">multu </span>$<span class="number">15</span>,$<span class="number">14</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">16</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">17</span>,$<span class="number">16</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">div </span>$<span class="number">17</span>,$<span class="number">16</span></span><br><span class="line"><span class="keyword">mfhi </span>$<span class="number">18</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">18</span>,$<span class="number">18</span>,$<span class="number">18</span></span><br><span class="line"><span class="keyword">divu </span>$<span class="number">18</span>,$<span class="number">17</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">19</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">19</span>,$<span class="number">19</span>,$<span class="number">19</span></span><br><span class="line"><span class="keyword">mthi </span>$<span class="number">19</span></span><br><span class="line"><span class="keyword">mtlo </span>$<span class="number">17</span></span><br><span class="line"><span class="keyword">mflo </span>$<span class="number">20</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">20</span>,$<span class="number">20</span>,$<span class="number">19</span></span><br><span class="line"><span class="keyword">mfhi </span>$<span class="number">21</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">21</span>,$<span class="number">21</span>,$<span class="number">20</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">1</span>,$<span class="number">0</span>,<span class="number">0x1011</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">2</span>,$<span class="number">1</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">11</span>,$<span class="number">0</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">4</span>,$<span class="number">3</span>,<span class="number">0xffff</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="number">3</span>,<span class="number">0x0111</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">4</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">add </span>$<span class="number">5</span>,$<span class="number">5</span>,$<span class="number">5</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">add </span>$<span class="number">11</span>,$<span class="number">11</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="number">11</span>,$<span class="number">0</span>,loop4</span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">0</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="number">7</span>,$<span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">8</span>,$<span class="number">4</span>,$<span class="number">7</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">4</span>,$<span class="number">8</span></span><br><span class="line"><span class="keyword">mtc0 </span>$<span class="number">6</span>,$<span class="number">14</span></span><br><span class="line"><span class="keyword">mfc0 </span>$<span class="number">7</span>,$<span class="number">14</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">6</span>,$<span class="number">6</span></span><br><span class="line"><span class="keyword">sub </span>$<span class="number">6</span>,$<span class="number">3</span>,$<span class="number">4</span></span><br><span class="line"><span class="symbol">loop3:</span><span class="keyword">sw </span>$<span class="number">5</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">sw </span>$<span class="number">6</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">9</span>,<span class="number">4</span>($<span class="number">1</span>)</span><br><span class="line"><span class="keyword">lw </span>$<span class="number">10</span>,<span class="number">4</span>($<span class="number">2</span>)</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">10</span>,loop1</span><br><span class="line"><span class="keyword">beq </span>$<span class="number">5</span>,$<span class="number">9</span>,loop2</span><br><span class="line"><span class="symbol">loop1:</span><span class="keyword">sw </span>$<span class="number">10</span>,<span class="number">8</span>($<span class="number">2</span>)</span><br><span class="line"><span class="symbol">loop2:</span><span class="keyword">bne </span>$<span class="number">6</span>,$<span class="number">10</span>,loop3</span><br><span class="line"><span class="symbol">loop4:</span><span class="keyword">sw </span>$<span class="number">9</span>,<span class="number">12</span>($<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>

<p>异常：</p>
<div class="code-container" data-rel="Mips"><figure class="iseeu highlight mips"><table><tr><td class="code"><pre><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>,$<span class="number">0</span>,<span class="number">0x1001</span></span><br><span class="line"><span class="keyword">mtc0 </span>$<span class="built_in">t0</span>,$<span class="number">12</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">t0</span>,<span class="number">0x7fff</span></span><br><span class="line"><span class="keyword">bne </span>$<span class="built_in">t0</span>,$<span class="built_in">t1</span>,loop</span><br><span class="line"><span class="keyword">syscall</span></span><br><span class="line"><span class="keyword"></span><span class="symbol">loop:</span><span class="keyword">addi </span>$<span class="number">1</span>,$<span class="built_in">t0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line">.ktext <span class="number">0x4180</span></span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">s0</span>,$<span class="built_in">s0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">mfc0 </span>$<span class="built_in">s1</span>,$<span class="number">14</span></span><br><span class="line"><span class="keyword">mfc0 </span>$<span class="built_in">s2</span>,$<span class="number">13</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">s3</span>,$<span class="number">0</span>,<span class="number">124</span></span><br><span class="line"><span class="keyword">and </span>$<span class="built_in">s2</span>,$<span class="built_in">s2</span>,$<span class="built_in">s3</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">s2</span>,$<span class="number">0</span>,intreq</span><br><span class="line"><span class="keyword">mfc0 </span>$<span class="built_in">s2</span>,$<span class="number">13</span></span><br><span class="line"><span class="keyword">lui </span>$<span class="built_in">s3</span>,<span class="number">0x8000</span></span><br><span class="line"><span class="keyword">and </span>$<span class="built_in">s2</span>,$<span class="built_in">s2</span>,$<span class="built_in">s3</span></span><br><span class="line"><span class="keyword">beq </span>$<span class="built_in">s2</span>,$<span class="built_in">s3</span>,delayreq</span><br><span class="line"><span class="keyword">addi </span>$<span class="built_in">s1</span>,$<span class="built_in">s1</span>,<span class="number">4</span></span><br><span class="line"><span class="keyword">mtc0 </span>$<span class="built_in">s1</span>,$<span class="number">14</span></span><br><span class="line"><span class="keyword">eret</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">delayreq:</span></span><br><span class="line"><span class="keyword">ori </span>$<span class="built_in">t0</span>,$<span class="number">0</span>,<span class="number">0x3000</span></span><br><span class="line"><span class="keyword">eret</span></span><br><span class="line"><span class="keyword"></span><span class="symbol"></span></span><br><span class="line"><span class="symbol">intreq:</span></span><br><span class="line"><span class="keyword">sb </span>$<span class="number">0</span>,<span class="number">0x7f20</span>($<span class="number">0</span>)</span><br><span class="line"><span class="keyword">eret</span></span><br></pre></td></tr></table></figure></div>
<h1 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h1><h2 id="请查阅相关资料，说明鼠标和键盘的输入信号是如何被-CPU-知晓的？"><a href="#请查阅相关资料，说明鼠标和键盘的输入信号是如何被-CPU-知晓的？" class="headerlink" title="请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？"></a>请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？</h2><p>输入设备通过USB等接口传输信号到计算机并到达CPU时，通常会产生一个中断，进入驱动程序后根据中断信号的值产生相应的操作。</p>
<h2 id="请思考为什么我们的-CPU-处理中断异常必须是已经指定好的地址？如果你的-CPU-支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）"><a href="#请思考为什么我们的-CPU-处理中断异常必须是已经指定好的地址？如果你的-CPU-支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）" class="headerlink" title="请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）"></a>请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）</h2><p>按理来说可以，但若这样可能会影响异常处理的时间和性能，不如使用预定义的地址相应的快速，且用户自定义入口地址可能会和正常运行的程序的地址冲突，导致发生错误。</p>
<h2 id="为何与外设通信需要-Bridge？"><a href="#为何与外设通信需要-Bridge？" class="headerlink" title="为何与外设通信需要 Bridge？"></a>为何与外设通信需要 Bridge？</h2><p>这样符合“高内聚，低耦合”的思想，使得特定的模块只用考虑自己做的事情就好了，不需要考虑相应的数据是从哪里来的，达到分工明确，实现较好的封装。</p>
<h2 id="请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图。"><a href="#请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图。" class="headerlink" title="请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图。"></a>请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图。</h2><p>模式0可以让中断信号一直保持直到技术使能信号再次被置为1，而模式1则在每次计数为0时发出一个中断信号，只维持一个周期。<br>模式0：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p7/pattern_0.jpg"
                     
                ></p>
<p>模式1：<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/img/%E8%AE%A1%E7%BB%84/p7/pattern_1.jpg"
                     
                ></p>
<h2 id="倘若中断信号流入的时候，在检测宏观-PC-的一级如果是一条空泡（你的-CPU-该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在-P7-中，清空流水线产生的空泡指令应该保留原指令的哪些信息？"><a href="#倘若中断信号流入的时候，在检测宏观-PC-的一级如果是一条空泡（你的-CPU-该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在-P7-中，清空流水线产生的空泡指令应该保留原指令的哪些信息？" class="headerlink" title="倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？"></a>倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？</h2><p>受害PC写入CP0发生错误，导致异常处理程序结束后无法跳转到正确的地址继续执行相应指令。应保留原指令的地址。</p>
<h2 id="为什么-jalr-指令为什么不能写成-jalr-31-31"><a href="#为什么-jalr-指令为什么不能写成-jalr-31-31" class="headerlink" title="为什么 jalr 指令为什么不能写成 jalr $31, $31"></a>为什么 jalr 指令为什么不能写成 jalr $31, $31</h2><p>若jalr的延迟槽指令发生异常或响应中断，则异常处理程序结束后会重新回到jalr并执行，但此时$31号寄存器的值已经被修改，再次跳转的时候便会错误执行。</p>
]]></content>
      <categories>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>BUAA</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
</search>
